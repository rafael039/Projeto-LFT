/*
   Simple +/-/* expression language;
   parser evaluates constant expressions on the fly
*/

package cup.example;

import java_cup.runtime.*;
import cup.example.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

parser code {:
  protected Lexer lexer;
:}


/* define how to connect to the scanner! */
init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  }
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, UMINUS, TIMES, LPAREN, RPAREN,
 					FUNCTION, IS, BEGIN, END, IDENTIFICADOR, ATRIBUICAO,
 					BOOLEAN, STRING, CHARACTER, IF, THEN, ELSE, FOR, LOOP, IN, PONTOS, VIRGULA, DOIS_PONTOS,
 					WHILE, MENOR, MAIOR, MENORIGUAL, MAIORIGUAL, DIFERENTE, TIPO, PUTS, FLOAT, TRUE,
 					FALSE, BARRADIVISAO, ASPASSIMPLES, ASPASDUPLAS, IGUALDADE, AND, OR, OF, WHEN, COMENT, ARRAY,
 					RETURN, EXIT, TYPE,COMMENT;

terminal Integer    INTEGER;        // our scanner provides numbers as integers
/* Non terminals */
non terminal            programa,decl, cmd, var, value,estr_condicional,
						estr_repeticao,estr_for,estr_while,tamanho,var_aninhadas,
						op_comp, puts,decl_subprograma,decl_parametros,parametro,n_parametros,
						chamada_funcao,passagem_param,passagem_param_aninhado,array_def,baritmetica,bterm,retorno,oper_aritmetica,
						oper_booleana,oper_or,bcompar,bmult,bterminal,atribuicao,chamada_funcao_expressao;
/* Precedences */

/* precedence left PLUS, MINUS;
precedence left TIMES;
precedence left UMINUS; */

/* The grammar rules */

programa     ::= FUNCTION IDENTIFICADOR IS decl BEGIN cmd END IDENTIFICADOR SEMI
			   | FUNCTION IDENTIFICADOR IS BEGIN cmd END IDENTIFICADOR SEMI
			   ;

decl_subprograma     ::=  FUNCTION IDENTIFICADOR decl_parametros IS decl BEGIN
					  	  cmd END IDENTIFICADOR SEMI
					     | FUNCTION IDENTIFICADOR decl_parametros IS BEGIN
					  	  cmd END IDENTIFICADOR SEMI
					      ;

decl                 ::= var SEMI decl
						| decl_subprograma decl
						;

var                  ::= IDENTIFICADOR DOIS_PONTOS TIPO ATRIBUICAO value
						| IDENTIFICADOR DOIS_PONTOS TIPO
				        | var_aninhadas IDENTIFICADOR DOIS_PONTOS TIPO
				        | array_def
				        ;

var_aninhadas ::= var_aninhadas IDENTIFICADOR VIRGULA
				 | IDENTIFICADOR VIRGULA
				 ;

decl_parametros      ::= LPAREN parametro RPAREN
					   | LPAREN parametro RPAREN RETURN TIPO
					   ;

parametro            ::= IDENTIFICADOR DOIS_PONTOS TIPO n_parametros
			            ;

n_parametros         ::= SEMI IDENTIFICADOR DOIS_PONTOS TIPO n_parametros
				        |
				        ;

chamada_funcao       ::= IDENTIFICADOR LPAREN passagem_param RPAREN SEMI
						 ;

chamada_funcao_expressao ::= IDENTIFICADOR LPAREN passagem_param RPAREN
						;

passagem_param          ::= oper_booleana passagem_param_aninhado
						   | oper_aritmetica passagem_param_aninhado
						;

passagem_param_aninhado ::= SEMI oper_booleana passagem_param_aninhado
		   		       	  | SEMI oper_aritmetica passagem_param_aninhado
		   		          |
		   		          ;

value         ::= BOOLEAN
				 | STRING
				 | INTEGER
				 | CHARACTER
				 | FLOAT
				 ;

cmd           ::= cmd estr_condicional
				 | cmd estr_repeticao
				 | cmd puts
				 | cmd retorno
				 | cmd atribuicao
				 | cmd chamada_funcao
				 ;

puts          ::= PUTS LPAREN STRING RPAREN SEMI
				  ;

estr_condicional ::= IF oper_booleana THEN cmd ELSE cmd END IF SEMI
                    | IF oper_booleana THEN cmd END IF SEMI
                    ;

estr_repeticao   ::= estr_for
				    | estr_while
				    ;

estr_for       ::=  FOR IDENTIFICADOR IN tamanho LOOP
            		cmd
            		END LOOP SEMI
            		;

estr_while     ::=  WHILE oper_booleana INTEGER LOOP
 					cmd
 					END LOOP SEMI
 					;

tamanho   ::= IDENTIFICADOR PONTOS IDENTIFICADOR
			  ;

atribuicao              ::= IDENTIFICADOR ATRIBUICAO oper_aritmetica SEMI
						   ;

oper_booleana            ::= oper_booleana AND oper_or
			   			   | oper_or
			   			   ;

oper_or                 ::= oper_or OR bcompar
				           | baritmetica
				           ;

bcompar                 ::= bcompar op_comp bterm
						   | bterm
						   ;

bterm                  	::= IDENTIFICADOR
						   | chamada_funcao_expressao
						   | LPAREN oper_booleana RPAREN
						   ;

op_comp                 ::= MENOR
						   | MAIOR
						   | MENORIGUAL
						   | MAIORIGUAL
						   | DIFERENTE
						   | IGUALDADE
						   ;


oper_aritmetica         ::= oper_aritmetica PLUS bmult
						   | oper_aritmetica MINUS bmult
		                   | bmult
				           ;


bmult	                ::= bmult TIMES bterminal
		                   | bmult BARRADIVISAO bterminal
						   | bterminal
						   ;

bterminal               ::= LPAREN oper_aritmetica RPAREN
				           | IDENTIFICADOR
				           | chamada_funcao_expressao
				           ;

array_def ::= TYPE IDENTIFICADOR IS ARRAY LPAREN tamanho RPAREN OF TIPO SEMI
			 ;

retorno ::= RETURN oper_booleana
		   | RETURN oper_aritmetica
		   ;