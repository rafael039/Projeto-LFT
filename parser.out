Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> PROCEDURE ID IS decl body
Rule 2     program -> PROCEDURE ID IS body
Rule 3     subprogram -> FUNCTION ID decl_param IS decl body
Rule 4     subprogram -> FUNCTION ID decl_param IS body
Rule 5     body -> BEGIN cmd_loop END ID SEMICOLON
Rule 6     decl -> var SEMICOLON decl_loop
Rule 7     decl -> subprogram decl_loop
Rule 8     decl_loop -> subprogram decl_loop
Rule 9     decl_loop -> subprogram
Rule 10    decl_loop -> var SEMICOLON decl_loop
Rule 11    decl_loop -> var SEMICOLON
Rule 12    var -> ID COMMA TYPE ASSIGN value
Rule 13    var -> ID COLON TYPE
Rule 14    var -> var_loop ID COLON TYPE
Rule 15    var -> array
Rule 16    var_loop -> var_loop ID COMMA
Rule 17    var_loop -> ID COMMA
Rule 18    decl_param -> LPAREN param RPAREN
Rule 19    decl_param -> LPAREN param RPAREN RETURN TYPE
Rule 20    param -> ID COLON TYPE SEMICOLON param
Rule 21    param -> ID COLON TYPE SEMICOLON
Rule 22    function_call -> ID LPAREN param_pass RPAREN SEMICOLON
Rule 23    function_call_exp -> ID LPAREN param_pass RPAREN
Rule 24    param_pass -> expression COMMA param_pass
Rule 25    param_pass -> expression
Rule 26    value -> NUMBER_INT
Rule 27    value -> NUMBER_FLOAT
Rule 28    value -> NUMBER_EXPONENT
Rule 29    value -> BOOLEAN
Rule 30    value -> STRING
Rule 31    value -> CHAR
Rule 32    cmd -> if_statement
Rule 33    cmd -> repeat_statement
Rule 34    cmd -> puts
Rule 35    cmd -> return
Rule 36    cmd -> assign
Rule 37    cmd -> function_call
Rule 38    cmd_loop -> cmd_loop cmd
Rule 39    cmd_loop -> cmd
Rule 40    puts -> PUTS LPAREN STRING RPAREN SEMICOLON
Rule 41    if_statement -> IF expression THEN cmd_loop if_statement_loop
Rule 42    if_statement_loop -> ELSIF expression cmd_loop if_statement_loop
Rule 43    if_statement_loop -> ELSE expression cmd_loop END IF SEMICOLON
Rule 44    if_statement_loop -> END IF SEMICOLON
Rule 45    repeat_statement -> loop_statement
Rule 46    repeat_statement -> for_statement
Rule 47    repeat_statement -> while_statement
Rule 48    loop_statement -> LOOP cmd_loop END LOOP
Rule 49    while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON
Rule 50    for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
Rule 51    range -> ID DOTDOT ID
Rule 52    assign -> ID ASSIGN op_arithmetic SEMICOLON
Rule 53    expression -> expression AND or_exp
Rule 54    expression -> or_exp
Rule 55    or_exp -> or_exp OR comp_exp
Rule 56    or_exp -> comp_exp
Rule 57    comp_exp -> comp_exp comp_op op_arithmetic
Rule 58    comp_exp -> op_arithmetic
Rule 59    comp_op -> GREATERTHAN
Rule 60    comp_op -> GREATERTHANEQUAL
Rule 61    comp_op -> LESSTHAN
Rule 62    comp_op -> LESSTHANEQUAL
Rule 63    comp_op -> NOTEQUAL
Rule 64    comp_op -> EQUAL
Rule 65    op_arithmetic -> op_arithmetic PLUS factor
Rule 66    op_arithmetic -> op_arithmetic MINUS factor
Rule 67    op_arithmetic -> factor
Rule 68    factor -> factor TIMES power
Rule 69    factor -> factor DIVIDE power
Rule 70    factor -> power
Rule 71    power -> power POWER term
Rule 72    power -> term
Rule 73    term -> ID
Rule 74    term -> function_call_exp
Rule 75    term -> LPAREN expression RPAREN
Rule 76    array -> TYPE ID IS ARRAY LPAREN range RPAREN OF TYPE SEMICOLON
Rule 77    return -> RETURN expression SEMICOLON

Terminals, with rules where they appear

AND                  : 53
ARRAY                : 76
ASSIGN               : 12 52
BEGIN                : 5
BOOLEAN              : 29
CHAR                 : 31
COLON                : 13 14 20 21
COMMA                : 12 16 17 24
DIVIDE               : 69
DOTDOT               : 51
ELSE                 : 43
ELSIF                : 42
END                  : 5 43 44 48 49 50
EQUAL                : 64
FOR                  : 50
FUNCTION             : 3 4
GREATERTHAN          : 59
GREATERTHANEQUAL     : 60
ID                   : 1 2 3 4 5 12 13 14 16 17 20 21 22 23 50 51 51 52 73 76
IF                   : 41 43 44
IN                   : 50
IS                   : 1 2 3 4 76
LESSTHAN             : 61
LESSTHANEQUAL        : 62
LOOP                 : 48 48 49 49 50 50
LPAREN               : 18 19 22 23 40 75 76
MINUS                : 66
NOTEQUAL             : 63
NUMBER_EXPONENT      : 28
NUMBER_FLOAT         : 27
NUMBER_INT           : 26 49
OF                   : 76
OR                   : 55
PLUS                 : 65
POWER                : 71
PROCEDURE            : 1 2
PUTS                 : 40
RETURN               : 19 77
RPAREN               : 18 19 22 23 40 75 76
SEMICOLON            : 5 6 10 11 20 21 22 40 43 44 49 50 52 76 77
STRING               : 30 40
THEN                 : 41
TIMES                : 68
TYPE                 : 12 13 14 19 20 21 76 76
WHILE                : 49
error                : 

Nonterminals, with rules where they appear

array                : 15
assign               : 36
body                 : 1 2 3 4
cmd                  : 38 39
cmd_loop             : 5 38 41 42 43 48 49 50
comp_exp             : 55 56 57
comp_op              : 57
decl                 : 1 3
decl_loop            : 6 7 8 10
decl_param           : 3 4
expression           : 24 25 41 42 43 49 53 75 77
factor               : 65 66 67 68 69
for_statement        : 46
function_call        : 37
function_call_exp    : 74
if_statement         : 32
if_statement_loop    : 41 42
loop_statement       : 45
op_arithmetic        : 52 57 58 65 66
or_exp               : 53 54 55
param                : 18 19 20
param_pass           : 22 23 24
power                : 68 69 70 71
program              : 0
puts                 : 34
range                : 50 76
repeat_statement     : 33
return               : 35
subprogram           : 7 8 9
term                 : 71 72
value                : 12
var                  : 6 10 11
var_loop             : 14 16
while_statement      : 47

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . PROCEDURE ID IS decl body
    (2) program -> . PROCEDURE ID IS body

    PROCEDURE       shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .



state 2

    (1) program -> PROCEDURE . ID IS decl body
    (2) program -> PROCEDURE . ID IS body

    ID              shift and go to state 3


state 3

    (1) program -> PROCEDURE ID . IS decl body
    (2) program -> PROCEDURE ID . IS body

    IS              shift and go to state 4


state 4

    (1) program -> PROCEDURE ID IS . decl body
    (2) program -> PROCEDURE ID IS . body
    (6) decl -> . var SEMICOLON decl_loop
    (7) decl -> . subprogram decl_loop
    (5) body -> . BEGIN cmd_loop END ID SEMICOLON
    (12) var -> . ID COMMA TYPE ASSIGN value
    (13) var -> . ID COLON TYPE
    (14) var -> . var_loop ID COLON TYPE
    (15) var -> . array
    (3) subprogram -> . FUNCTION ID decl_param IS decl body
    (4) subprogram -> . FUNCTION ID decl_param IS body
    (16) var_loop -> . var_loop ID COMMA
    (17) var_loop -> . ID COMMA
    (76) array -> . TYPE ID IS ARRAY LPAREN range RPAREN OF TYPE SEMICOLON

    BEGIN           shift and go to state 10
    ID              shift and go to state 5
    FUNCTION        shift and go to state 14
    TYPE            shift and go to state 11

    decl                           shift and go to state 6
    body                           shift and go to state 7
    var                            shift and go to state 8
    subprogram                     shift and go to state 9
    var_loop                       shift and go to state 12
    array                          shift and go to state 13

state 5

    (12) var -> ID . COMMA TYPE ASSIGN value
    (13) var -> ID . COLON TYPE
    (17) var_loop -> ID . COMMA

    COMMA           shift and go to state 15
    COLON           shift and go to state 16


state 6

    (1) program -> PROCEDURE ID IS decl . body
    (5) body -> . BEGIN cmd_loop END ID SEMICOLON

    BEGIN           shift and go to state 10

    body                           shift and go to state 17

state 7

    (2) program -> PROCEDURE ID IS body .

    $end            reduce using rule 2 (program -> PROCEDURE ID IS body .)


state 8

    (6) decl -> var . SEMICOLON decl_loop

    SEMICOLON       shift and go to state 18


state 9

    (7) decl -> subprogram . decl_loop
    (8) decl_loop -> . subprogram decl_loop
    (9) decl_loop -> . subprogram
    (10) decl_loop -> . var SEMICOLON decl_loop
    (11) decl_loop -> . var SEMICOLON
    (3) subprogram -> . FUNCTION ID decl_param IS decl body
    (4) subprogram -> . FUNCTION ID decl_param IS body
    (12) var -> . ID COMMA TYPE ASSIGN value
    (13) var -> . ID COLON TYPE
    (14) var -> . var_loop ID COLON TYPE
    (15) var -> . array
    (16) var_loop -> . var_loop ID COMMA
    (17) var_loop -> . ID COMMA
    (76) array -> . TYPE ID IS ARRAY LPAREN range RPAREN OF TYPE SEMICOLON

    FUNCTION        shift and go to state 14
    ID              shift and go to state 5
    TYPE            shift and go to state 11

    subprogram                     shift and go to state 19
    decl_loop                      shift and go to state 20
    var                            shift and go to state 21
    var_loop                       shift and go to state 12
    array                          shift and go to state 13

state 10

    (5) body -> BEGIN . cmd_loop END ID SEMICOLON
    (38) cmd_loop -> . cmd_loop cmd
    (39) cmd_loop -> . cmd
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    cmd_loop                       shift and go to state 22
    cmd                            shift and go to state 24
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 11

    (76) array -> TYPE . ID IS ARRAY LPAREN range RPAREN OF TYPE SEMICOLON

    ID              shift and go to state 40


state 12

    (14) var -> var_loop . ID COLON TYPE
    (16) var_loop -> var_loop . ID COMMA

    ID              shift and go to state 41


state 13

    (15) var -> array .

    SEMICOLON       reduce using rule 15 (var -> array .)


state 14

    (3) subprogram -> FUNCTION . ID decl_param IS decl body
    (4) subprogram -> FUNCTION . ID decl_param IS body

    ID              shift and go to state 42


state 15

    (12) var -> ID COMMA . TYPE ASSIGN value
    (17) var_loop -> ID COMMA .

    TYPE            shift and go to state 43
    ID              reduce using rule 17 (var_loop -> ID COMMA .)


state 16

    (13) var -> ID COLON . TYPE

    TYPE            shift and go to state 44


state 17

    (1) program -> PROCEDURE ID IS decl body .

    $end            reduce using rule 1 (program -> PROCEDURE ID IS decl body .)


state 18

    (6) decl -> var SEMICOLON . decl_loop
    (8) decl_loop -> . subprogram decl_loop
    (9) decl_loop -> . subprogram
    (10) decl_loop -> . var SEMICOLON decl_loop
    (11) decl_loop -> . var SEMICOLON
    (3) subprogram -> . FUNCTION ID decl_param IS decl body
    (4) subprogram -> . FUNCTION ID decl_param IS body
    (12) var -> . ID COMMA TYPE ASSIGN value
    (13) var -> . ID COLON TYPE
    (14) var -> . var_loop ID COLON TYPE
    (15) var -> . array
    (16) var_loop -> . var_loop ID COMMA
    (17) var_loop -> . ID COMMA
    (76) array -> . TYPE ID IS ARRAY LPAREN range RPAREN OF TYPE SEMICOLON

    FUNCTION        shift and go to state 14
    ID              shift and go to state 5
    TYPE            shift and go to state 11

    var                            shift and go to state 21
    decl_loop                      shift and go to state 45
    subprogram                     shift and go to state 19
    var_loop                       shift and go to state 12
    array                          shift and go to state 13

state 19

    (8) decl_loop -> subprogram . decl_loop
    (9) decl_loop -> subprogram .
    (8) decl_loop -> . subprogram decl_loop
    (9) decl_loop -> . subprogram
    (10) decl_loop -> . var SEMICOLON decl_loop
    (11) decl_loop -> . var SEMICOLON
    (3) subprogram -> . FUNCTION ID decl_param IS decl body
    (4) subprogram -> . FUNCTION ID decl_param IS body
    (12) var -> . ID COMMA TYPE ASSIGN value
    (13) var -> . ID COLON TYPE
    (14) var -> . var_loop ID COLON TYPE
    (15) var -> . array
    (16) var_loop -> . var_loop ID COMMA
    (17) var_loop -> . ID COMMA
    (76) array -> . TYPE ID IS ARRAY LPAREN range RPAREN OF TYPE SEMICOLON

    BEGIN           reduce using rule 9 (decl_loop -> subprogram .)
    FUNCTION        shift and go to state 14
    ID              shift and go to state 5
    TYPE            shift and go to state 11

    subprogram                     shift and go to state 19
    decl_loop                      shift and go to state 46
    var                            shift and go to state 21
    var_loop                       shift and go to state 12
    array                          shift and go to state 13

state 20

    (7) decl -> subprogram decl_loop .

    BEGIN           reduce using rule 7 (decl -> subprogram decl_loop .)


state 21

    (10) decl_loop -> var . SEMICOLON decl_loop
    (11) decl_loop -> var . SEMICOLON

    SEMICOLON       shift and go to state 47


state 22

    (5) body -> BEGIN cmd_loop . END ID SEMICOLON
    (38) cmd_loop -> cmd_loop . cmd
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    END             shift and go to state 48
    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    cmd                            shift and go to state 49
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 23

    (52) assign -> ID . ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> ID . LPAREN param_pass RPAREN SEMICOLON

    ASSIGN          shift and go to state 50
    LPAREN          shift and go to state 51


state 24

    (39) cmd_loop -> cmd .

    END             reduce using rule 39 (cmd_loop -> cmd .)
    IF              reduce using rule 39 (cmd_loop -> cmd .)
    PUTS            reduce using rule 39 (cmd_loop -> cmd .)
    RETURN          reduce using rule 39 (cmd_loop -> cmd .)
    ID              reduce using rule 39 (cmd_loop -> cmd .)
    LOOP            reduce using rule 39 (cmd_loop -> cmd .)
    FOR             reduce using rule 39 (cmd_loop -> cmd .)
    WHILE           reduce using rule 39 (cmd_loop -> cmd .)
    ELSIF           reduce using rule 39 (cmd_loop -> cmd .)
    ELSE            reduce using rule 39 (cmd_loop -> cmd .)


state 25

    (32) cmd -> if_statement .

    END             reduce using rule 32 (cmd -> if_statement .)
    IF              reduce using rule 32 (cmd -> if_statement .)
    PUTS            reduce using rule 32 (cmd -> if_statement .)
    RETURN          reduce using rule 32 (cmd -> if_statement .)
    ID              reduce using rule 32 (cmd -> if_statement .)
    LOOP            reduce using rule 32 (cmd -> if_statement .)
    FOR             reduce using rule 32 (cmd -> if_statement .)
    WHILE           reduce using rule 32 (cmd -> if_statement .)
    ELSIF           reduce using rule 32 (cmd -> if_statement .)
    ELSE            reduce using rule 32 (cmd -> if_statement .)


state 26

    (33) cmd -> repeat_statement .

    END             reduce using rule 33 (cmd -> repeat_statement .)
    IF              reduce using rule 33 (cmd -> repeat_statement .)
    PUTS            reduce using rule 33 (cmd -> repeat_statement .)
    RETURN          reduce using rule 33 (cmd -> repeat_statement .)
    ID              reduce using rule 33 (cmd -> repeat_statement .)
    LOOP            reduce using rule 33 (cmd -> repeat_statement .)
    FOR             reduce using rule 33 (cmd -> repeat_statement .)
    WHILE           reduce using rule 33 (cmd -> repeat_statement .)
    ELSIF           reduce using rule 33 (cmd -> repeat_statement .)
    ELSE            reduce using rule 33 (cmd -> repeat_statement .)


state 27

    (34) cmd -> puts .

    END             reduce using rule 34 (cmd -> puts .)
    IF              reduce using rule 34 (cmd -> puts .)
    PUTS            reduce using rule 34 (cmd -> puts .)
    RETURN          reduce using rule 34 (cmd -> puts .)
    ID              reduce using rule 34 (cmd -> puts .)
    LOOP            reduce using rule 34 (cmd -> puts .)
    FOR             reduce using rule 34 (cmd -> puts .)
    WHILE           reduce using rule 34 (cmd -> puts .)
    ELSIF           reduce using rule 34 (cmd -> puts .)
    ELSE            reduce using rule 34 (cmd -> puts .)


state 28

    (35) cmd -> return .

    END             reduce using rule 35 (cmd -> return .)
    IF              reduce using rule 35 (cmd -> return .)
    PUTS            reduce using rule 35 (cmd -> return .)
    RETURN          reduce using rule 35 (cmd -> return .)
    ID              reduce using rule 35 (cmd -> return .)
    LOOP            reduce using rule 35 (cmd -> return .)
    FOR             reduce using rule 35 (cmd -> return .)
    WHILE           reduce using rule 35 (cmd -> return .)
    ELSIF           reduce using rule 35 (cmd -> return .)
    ELSE            reduce using rule 35 (cmd -> return .)


state 29

    (36) cmd -> assign .

    END             reduce using rule 36 (cmd -> assign .)
    IF              reduce using rule 36 (cmd -> assign .)
    PUTS            reduce using rule 36 (cmd -> assign .)
    RETURN          reduce using rule 36 (cmd -> assign .)
    ID              reduce using rule 36 (cmd -> assign .)
    LOOP            reduce using rule 36 (cmd -> assign .)
    FOR             reduce using rule 36 (cmd -> assign .)
    WHILE           reduce using rule 36 (cmd -> assign .)
    ELSIF           reduce using rule 36 (cmd -> assign .)
    ELSE            reduce using rule 36 (cmd -> assign .)


state 30

    (37) cmd -> function_call .

    END             reduce using rule 37 (cmd -> function_call .)
    IF              reduce using rule 37 (cmd -> function_call .)
    PUTS            reduce using rule 37 (cmd -> function_call .)
    RETURN          reduce using rule 37 (cmd -> function_call .)
    ID              reduce using rule 37 (cmd -> function_call .)
    LOOP            reduce using rule 37 (cmd -> function_call .)
    FOR             reduce using rule 37 (cmd -> function_call .)
    WHILE           reduce using rule 37 (cmd -> function_call .)
    ELSIF           reduce using rule 37 (cmd -> function_call .)
    ELSE            reduce using rule 37 (cmd -> function_call .)


state 31

    (41) if_statement -> IF . expression THEN cmd_loop if_statement_loop
    (53) expression -> . expression AND or_exp
    (54) expression -> . or_exp
    (55) or_exp -> . or_exp OR comp_exp
    (56) or_exp -> . comp_exp
    (57) comp_exp -> . comp_exp comp_op op_arithmetic
    (58) comp_exp -> . op_arithmetic
    (65) op_arithmetic -> . op_arithmetic PLUS factor
    (66) op_arithmetic -> . op_arithmetic MINUS factor
    (67) op_arithmetic -> . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    expression                     shift and go to state 52
    or_exp                         shift and go to state 53
    comp_exp                       shift and go to state 54
    op_arithmetic                  shift and go to state 55
    factor                         shift and go to state 56
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 32

    (45) repeat_statement -> loop_statement .

    END             reduce using rule 45 (repeat_statement -> loop_statement .)
    IF              reduce using rule 45 (repeat_statement -> loop_statement .)
    PUTS            reduce using rule 45 (repeat_statement -> loop_statement .)
    RETURN          reduce using rule 45 (repeat_statement -> loop_statement .)
    ID              reduce using rule 45 (repeat_statement -> loop_statement .)
    LOOP            reduce using rule 45 (repeat_statement -> loop_statement .)
    FOR             reduce using rule 45 (repeat_statement -> loop_statement .)
    WHILE           reduce using rule 45 (repeat_statement -> loop_statement .)
    ELSIF           reduce using rule 45 (repeat_statement -> loop_statement .)
    ELSE            reduce using rule 45 (repeat_statement -> loop_statement .)


state 33

    (46) repeat_statement -> for_statement .

    END             reduce using rule 46 (repeat_statement -> for_statement .)
    IF              reduce using rule 46 (repeat_statement -> for_statement .)
    PUTS            reduce using rule 46 (repeat_statement -> for_statement .)
    RETURN          reduce using rule 46 (repeat_statement -> for_statement .)
    ID              reduce using rule 46 (repeat_statement -> for_statement .)
    LOOP            reduce using rule 46 (repeat_statement -> for_statement .)
    FOR             reduce using rule 46 (repeat_statement -> for_statement .)
    WHILE           reduce using rule 46 (repeat_statement -> for_statement .)
    ELSIF           reduce using rule 46 (repeat_statement -> for_statement .)
    ELSE            reduce using rule 46 (repeat_statement -> for_statement .)


state 34

    (47) repeat_statement -> while_statement .

    END             reduce using rule 47 (repeat_statement -> while_statement .)
    IF              reduce using rule 47 (repeat_statement -> while_statement .)
    PUTS            reduce using rule 47 (repeat_statement -> while_statement .)
    RETURN          reduce using rule 47 (repeat_statement -> while_statement .)
    ID              reduce using rule 47 (repeat_statement -> while_statement .)
    LOOP            reduce using rule 47 (repeat_statement -> while_statement .)
    FOR             reduce using rule 47 (repeat_statement -> while_statement .)
    WHILE           reduce using rule 47 (repeat_statement -> while_statement .)
    ELSIF           reduce using rule 47 (repeat_statement -> while_statement .)
    ELSE            reduce using rule 47 (repeat_statement -> while_statement .)


state 35

    (40) puts -> PUTS . LPAREN STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 62


state 36

    (77) return -> RETURN . expression SEMICOLON
    (53) expression -> . expression AND or_exp
    (54) expression -> . or_exp
    (55) or_exp -> . or_exp OR comp_exp
    (56) or_exp -> . comp_exp
    (57) comp_exp -> . comp_exp comp_op op_arithmetic
    (58) comp_exp -> . op_arithmetic
    (65) op_arithmetic -> . op_arithmetic PLUS factor
    (66) op_arithmetic -> . op_arithmetic MINUS factor
    (67) op_arithmetic -> . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    expression                     shift and go to state 63
    or_exp                         shift and go to state 53
    comp_exp                       shift and go to state 54
    op_arithmetic                  shift and go to state 55
    factor                         shift and go to state 56
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 37

    (48) loop_statement -> LOOP . cmd_loop END LOOP
    (38) cmd_loop -> . cmd_loop cmd
    (39) cmd_loop -> . cmd
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    cmd_loop                       shift and go to state 64
    cmd                            shift and go to state 24
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 38

    (50) for_statement -> FOR . ID IN range LOOP cmd_loop END LOOP SEMICOLON

    ID              shift and go to state 65


state 39

    (49) while_statement -> WHILE . expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON
    (53) expression -> . expression AND or_exp
    (54) expression -> . or_exp
    (55) or_exp -> . or_exp OR comp_exp
    (56) or_exp -> . comp_exp
    (57) comp_exp -> . comp_exp comp_op op_arithmetic
    (58) comp_exp -> . op_arithmetic
    (65) op_arithmetic -> . op_arithmetic PLUS factor
    (66) op_arithmetic -> . op_arithmetic MINUS factor
    (67) op_arithmetic -> . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    expression                     shift and go to state 66
    or_exp                         shift and go to state 53
    comp_exp                       shift and go to state 54
    op_arithmetic                  shift and go to state 55
    factor                         shift and go to state 56
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 40

    (76) array -> TYPE ID . IS ARRAY LPAREN range RPAREN OF TYPE SEMICOLON

    IS              shift and go to state 67


state 41

    (14) var -> var_loop ID . COLON TYPE
    (16) var_loop -> var_loop ID . COMMA

    COLON           shift and go to state 68
    COMMA           shift and go to state 69


state 42

    (3) subprogram -> FUNCTION ID . decl_param IS decl body
    (4) subprogram -> FUNCTION ID . decl_param IS body
    (18) decl_param -> . LPAREN param RPAREN
    (19) decl_param -> . LPAREN param RPAREN RETURN TYPE

    LPAREN          shift and go to state 71

    decl_param                     shift and go to state 70

state 43

    (12) var -> ID COMMA TYPE . ASSIGN value

    ASSIGN          shift and go to state 72


state 44

    (13) var -> ID COLON TYPE .

    SEMICOLON       reduce using rule 13 (var -> ID COLON TYPE .)


state 45

    (6) decl -> var SEMICOLON decl_loop .

    BEGIN           reduce using rule 6 (decl -> var SEMICOLON decl_loop .)


state 46

    (8) decl_loop -> subprogram decl_loop .

    BEGIN           reduce using rule 8 (decl_loop -> subprogram decl_loop .)


state 47

    (10) decl_loop -> var SEMICOLON . decl_loop
    (11) decl_loop -> var SEMICOLON .
    (8) decl_loop -> . subprogram decl_loop
    (9) decl_loop -> . subprogram
    (10) decl_loop -> . var SEMICOLON decl_loop
    (11) decl_loop -> . var SEMICOLON
    (3) subprogram -> . FUNCTION ID decl_param IS decl body
    (4) subprogram -> . FUNCTION ID decl_param IS body
    (12) var -> . ID COMMA TYPE ASSIGN value
    (13) var -> . ID COLON TYPE
    (14) var -> . var_loop ID COLON TYPE
    (15) var -> . array
    (16) var_loop -> . var_loop ID COMMA
    (17) var_loop -> . ID COMMA
    (76) array -> . TYPE ID IS ARRAY LPAREN range RPAREN OF TYPE SEMICOLON

    BEGIN           reduce using rule 11 (decl_loop -> var SEMICOLON .)
    FUNCTION        shift and go to state 14
    ID              shift and go to state 5
    TYPE            shift and go to state 11

    var                            shift and go to state 21
    decl_loop                      shift and go to state 73
    subprogram                     shift and go to state 19
    var_loop                       shift and go to state 12
    array                          shift and go to state 13

state 48

    (5) body -> BEGIN cmd_loop END . ID SEMICOLON

    ID              shift and go to state 74


state 49

    (38) cmd_loop -> cmd_loop cmd .

    END             reduce using rule 38 (cmd_loop -> cmd_loop cmd .)
    IF              reduce using rule 38 (cmd_loop -> cmd_loop cmd .)
    PUTS            reduce using rule 38 (cmd_loop -> cmd_loop cmd .)
    RETURN          reduce using rule 38 (cmd_loop -> cmd_loop cmd .)
    ID              reduce using rule 38 (cmd_loop -> cmd_loop cmd .)
    LOOP            reduce using rule 38 (cmd_loop -> cmd_loop cmd .)
    FOR             reduce using rule 38 (cmd_loop -> cmd_loop cmd .)
    WHILE           reduce using rule 38 (cmd_loop -> cmd_loop cmd .)
    ELSIF           reduce using rule 38 (cmd_loop -> cmd_loop cmd .)
    ELSE            reduce using rule 38 (cmd_loop -> cmd_loop cmd .)


state 50

    (52) assign -> ID ASSIGN . op_arithmetic SEMICOLON
    (65) op_arithmetic -> . op_arithmetic PLUS factor
    (66) op_arithmetic -> . op_arithmetic MINUS factor
    (67) op_arithmetic -> . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    op_arithmetic                  shift and go to state 75
    factor                         shift and go to state 56
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 51

    (22) function_call -> ID LPAREN . param_pass RPAREN SEMICOLON
    (24) param_pass -> . expression COMMA param_pass
    (25) param_pass -> . expression
    (53) expression -> . expression AND or_exp
    (54) expression -> . or_exp
    (55) or_exp -> . or_exp OR comp_exp
    (56) or_exp -> . comp_exp
    (57) comp_exp -> . comp_exp comp_op op_arithmetic
    (58) comp_exp -> . op_arithmetic
    (65) op_arithmetic -> . op_arithmetic PLUS factor
    (66) op_arithmetic -> . op_arithmetic MINUS factor
    (67) op_arithmetic -> . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    param_pass                     shift and go to state 76
    expression                     shift and go to state 77
    or_exp                         shift and go to state 53
    comp_exp                       shift and go to state 54
    op_arithmetic                  shift and go to state 55
    factor                         shift and go to state 56
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 52

    (41) if_statement -> IF expression . THEN cmd_loop if_statement_loop
    (53) expression -> expression . AND or_exp

    THEN            shift and go to state 78
    AND             shift and go to state 79


state 53

    (54) expression -> or_exp .
    (55) or_exp -> or_exp . OR comp_exp

    THEN            reduce using rule 54 (expression -> or_exp .)
    AND             reduce using rule 54 (expression -> or_exp .)
    SEMICOLON       reduce using rule 54 (expression -> or_exp .)
    NUMBER_INT      reduce using rule 54 (expression -> or_exp .)
    COMMA           reduce using rule 54 (expression -> or_exp .)
    RPAREN          reduce using rule 54 (expression -> or_exp .)
    IF              reduce using rule 54 (expression -> or_exp .)
    PUTS            reduce using rule 54 (expression -> or_exp .)
    RETURN          reduce using rule 54 (expression -> or_exp .)
    ID              reduce using rule 54 (expression -> or_exp .)
    LOOP            reduce using rule 54 (expression -> or_exp .)
    FOR             reduce using rule 54 (expression -> or_exp .)
    WHILE           reduce using rule 54 (expression -> or_exp .)
    OR              shift and go to state 80


state 54

    (56) or_exp -> comp_exp .
    (57) comp_exp -> comp_exp . comp_op op_arithmetic
    (59) comp_op -> . GREATERTHAN
    (60) comp_op -> . GREATERTHANEQUAL
    (61) comp_op -> . LESSTHAN
    (62) comp_op -> . LESSTHANEQUAL
    (63) comp_op -> . NOTEQUAL
    (64) comp_op -> . EQUAL

    OR              reduce using rule 56 (or_exp -> comp_exp .)
    THEN            reduce using rule 56 (or_exp -> comp_exp .)
    AND             reduce using rule 56 (or_exp -> comp_exp .)
    SEMICOLON       reduce using rule 56 (or_exp -> comp_exp .)
    NUMBER_INT      reduce using rule 56 (or_exp -> comp_exp .)
    COMMA           reduce using rule 56 (or_exp -> comp_exp .)
    RPAREN          reduce using rule 56 (or_exp -> comp_exp .)
    IF              reduce using rule 56 (or_exp -> comp_exp .)
    PUTS            reduce using rule 56 (or_exp -> comp_exp .)
    RETURN          reduce using rule 56 (or_exp -> comp_exp .)
    ID              reduce using rule 56 (or_exp -> comp_exp .)
    LOOP            reduce using rule 56 (or_exp -> comp_exp .)
    FOR             reduce using rule 56 (or_exp -> comp_exp .)
    WHILE           reduce using rule 56 (or_exp -> comp_exp .)
    GREATERTHAN     shift and go to state 82
    GREATERTHANEQUAL shift and go to state 83
    LESSTHAN        shift and go to state 84
    LESSTHANEQUAL   shift and go to state 85
    NOTEQUAL        shift and go to state 86
    EQUAL           shift and go to state 87

    comp_op                        shift and go to state 81

state 55

    (58) comp_exp -> op_arithmetic .
    (65) op_arithmetic -> op_arithmetic . PLUS factor
    (66) op_arithmetic -> op_arithmetic . MINUS factor

    GREATERTHAN     reduce using rule 58 (comp_exp -> op_arithmetic .)
    GREATERTHANEQUAL reduce using rule 58 (comp_exp -> op_arithmetic .)
    LESSTHAN        reduce using rule 58 (comp_exp -> op_arithmetic .)
    LESSTHANEQUAL   reduce using rule 58 (comp_exp -> op_arithmetic .)
    NOTEQUAL        reduce using rule 58 (comp_exp -> op_arithmetic .)
    EQUAL           reduce using rule 58 (comp_exp -> op_arithmetic .)
    OR              reduce using rule 58 (comp_exp -> op_arithmetic .)
    THEN            reduce using rule 58 (comp_exp -> op_arithmetic .)
    AND             reduce using rule 58 (comp_exp -> op_arithmetic .)
    SEMICOLON       reduce using rule 58 (comp_exp -> op_arithmetic .)
    NUMBER_INT      reduce using rule 58 (comp_exp -> op_arithmetic .)
    COMMA           reduce using rule 58 (comp_exp -> op_arithmetic .)
    RPAREN          reduce using rule 58 (comp_exp -> op_arithmetic .)
    IF              reduce using rule 58 (comp_exp -> op_arithmetic .)
    PUTS            reduce using rule 58 (comp_exp -> op_arithmetic .)
    RETURN          reduce using rule 58 (comp_exp -> op_arithmetic .)
    ID              reduce using rule 58 (comp_exp -> op_arithmetic .)
    LOOP            reduce using rule 58 (comp_exp -> op_arithmetic .)
    FOR             reduce using rule 58 (comp_exp -> op_arithmetic .)
    WHILE           reduce using rule 58 (comp_exp -> op_arithmetic .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 56

    (67) op_arithmetic -> factor .
    (68) factor -> factor . TIMES power
    (69) factor -> factor . DIVIDE power

    PLUS            reduce using rule 67 (op_arithmetic -> factor .)
    MINUS           reduce using rule 67 (op_arithmetic -> factor .)
    GREATERTHAN     reduce using rule 67 (op_arithmetic -> factor .)
    GREATERTHANEQUAL reduce using rule 67 (op_arithmetic -> factor .)
    LESSTHAN        reduce using rule 67 (op_arithmetic -> factor .)
    LESSTHANEQUAL   reduce using rule 67 (op_arithmetic -> factor .)
    NOTEQUAL        reduce using rule 67 (op_arithmetic -> factor .)
    EQUAL           reduce using rule 67 (op_arithmetic -> factor .)
    OR              reduce using rule 67 (op_arithmetic -> factor .)
    THEN            reduce using rule 67 (op_arithmetic -> factor .)
    AND             reduce using rule 67 (op_arithmetic -> factor .)
    SEMICOLON       reduce using rule 67 (op_arithmetic -> factor .)
    NUMBER_INT      reduce using rule 67 (op_arithmetic -> factor .)
    COMMA           reduce using rule 67 (op_arithmetic -> factor .)
    RPAREN          reduce using rule 67 (op_arithmetic -> factor .)
    IF              reduce using rule 67 (op_arithmetic -> factor .)
    PUTS            reduce using rule 67 (op_arithmetic -> factor .)
    RETURN          reduce using rule 67 (op_arithmetic -> factor .)
    ID              reduce using rule 67 (op_arithmetic -> factor .)
    LOOP            reduce using rule 67 (op_arithmetic -> factor .)
    FOR             reduce using rule 67 (op_arithmetic -> factor .)
    WHILE           reduce using rule 67 (op_arithmetic -> factor .)
    TIMES           shift and go to state 90
    DIVIDE          shift and go to state 91


state 57

    (70) factor -> power .
    (71) power -> power . POWER term

    TIMES           reduce using rule 70 (factor -> power .)
    DIVIDE          reduce using rule 70 (factor -> power .)
    PLUS            reduce using rule 70 (factor -> power .)
    MINUS           reduce using rule 70 (factor -> power .)
    GREATERTHAN     reduce using rule 70 (factor -> power .)
    GREATERTHANEQUAL reduce using rule 70 (factor -> power .)
    LESSTHAN        reduce using rule 70 (factor -> power .)
    LESSTHANEQUAL   reduce using rule 70 (factor -> power .)
    NOTEQUAL        reduce using rule 70 (factor -> power .)
    EQUAL           reduce using rule 70 (factor -> power .)
    OR              reduce using rule 70 (factor -> power .)
    THEN            reduce using rule 70 (factor -> power .)
    AND             reduce using rule 70 (factor -> power .)
    SEMICOLON       reduce using rule 70 (factor -> power .)
    NUMBER_INT      reduce using rule 70 (factor -> power .)
    COMMA           reduce using rule 70 (factor -> power .)
    RPAREN          reduce using rule 70 (factor -> power .)
    IF              reduce using rule 70 (factor -> power .)
    PUTS            reduce using rule 70 (factor -> power .)
    RETURN          reduce using rule 70 (factor -> power .)
    ID              reduce using rule 70 (factor -> power .)
    LOOP            reduce using rule 70 (factor -> power .)
    FOR             reduce using rule 70 (factor -> power .)
    WHILE           reduce using rule 70 (factor -> power .)
    POWER           shift and go to state 92


state 58

    (72) power -> term .

    POWER           reduce using rule 72 (power -> term .)
    TIMES           reduce using rule 72 (power -> term .)
    DIVIDE          reduce using rule 72 (power -> term .)
    PLUS            reduce using rule 72 (power -> term .)
    MINUS           reduce using rule 72 (power -> term .)
    GREATERTHAN     reduce using rule 72 (power -> term .)
    GREATERTHANEQUAL reduce using rule 72 (power -> term .)
    LESSTHAN        reduce using rule 72 (power -> term .)
    LESSTHANEQUAL   reduce using rule 72 (power -> term .)
    NOTEQUAL        reduce using rule 72 (power -> term .)
    EQUAL           reduce using rule 72 (power -> term .)
    OR              reduce using rule 72 (power -> term .)
    THEN            reduce using rule 72 (power -> term .)
    AND             reduce using rule 72 (power -> term .)
    SEMICOLON       reduce using rule 72 (power -> term .)
    NUMBER_INT      reduce using rule 72 (power -> term .)
    COMMA           reduce using rule 72 (power -> term .)
    RPAREN          reduce using rule 72 (power -> term .)
    IF              reduce using rule 72 (power -> term .)
    PUTS            reduce using rule 72 (power -> term .)
    RETURN          reduce using rule 72 (power -> term .)
    ID              reduce using rule 72 (power -> term .)
    LOOP            reduce using rule 72 (power -> term .)
    FOR             reduce using rule 72 (power -> term .)
    WHILE           reduce using rule 72 (power -> term .)


state 59

    (73) term -> ID .
    (23) function_call_exp -> ID . LPAREN param_pass RPAREN

    POWER           reduce using rule 73 (term -> ID .)
    TIMES           reduce using rule 73 (term -> ID .)
    DIVIDE          reduce using rule 73 (term -> ID .)
    PLUS            reduce using rule 73 (term -> ID .)
    MINUS           reduce using rule 73 (term -> ID .)
    GREATERTHAN     reduce using rule 73 (term -> ID .)
    GREATERTHANEQUAL reduce using rule 73 (term -> ID .)
    LESSTHAN        reduce using rule 73 (term -> ID .)
    LESSTHANEQUAL   reduce using rule 73 (term -> ID .)
    NOTEQUAL        reduce using rule 73 (term -> ID .)
    EQUAL           reduce using rule 73 (term -> ID .)
    OR              reduce using rule 73 (term -> ID .)
    THEN            reduce using rule 73 (term -> ID .)
    AND             reduce using rule 73 (term -> ID .)
    SEMICOLON       reduce using rule 73 (term -> ID .)
    NUMBER_INT      reduce using rule 73 (term -> ID .)
    COMMA           reduce using rule 73 (term -> ID .)
    RPAREN          reduce using rule 73 (term -> ID .)
    IF              reduce using rule 73 (term -> ID .)
    PUTS            reduce using rule 73 (term -> ID .)
    RETURN          reduce using rule 73 (term -> ID .)
    ID              reduce using rule 73 (term -> ID .)
    LOOP            reduce using rule 73 (term -> ID .)
    FOR             reduce using rule 73 (term -> ID .)
    WHILE           reduce using rule 73 (term -> ID .)
    LPAREN          shift and go to state 93


state 60

    (74) term -> function_call_exp .

    POWER           reduce using rule 74 (term -> function_call_exp .)
    TIMES           reduce using rule 74 (term -> function_call_exp .)
    DIVIDE          reduce using rule 74 (term -> function_call_exp .)
    PLUS            reduce using rule 74 (term -> function_call_exp .)
    MINUS           reduce using rule 74 (term -> function_call_exp .)
    GREATERTHAN     reduce using rule 74 (term -> function_call_exp .)
    GREATERTHANEQUAL reduce using rule 74 (term -> function_call_exp .)
    LESSTHAN        reduce using rule 74 (term -> function_call_exp .)
    LESSTHANEQUAL   reduce using rule 74 (term -> function_call_exp .)
    NOTEQUAL        reduce using rule 74 (term -> function_call_exp .)
    EQUAL           reduce using rule 74 (term -> function_call_exp .)
    OR              reduce using rule 74 (term -> function_call_exp .)
    THEN            reduce using rule 74 (term -> function_call_exp .)
    AND             reduce using rule 74 (term -> function_call_exp .)
    SEMICOLON       reduce using rule 74 (term -> function_call_exp .)
    NUMBER_INT      reduce using rule 74 (term -> function_call_exp .)
    COMMA           reduce using rule 74 (term -> function_call_exp .)
    RPAREN          reduce using rule 74 (term -> function_call_exp .)
    IF              reduce using rule 74 (term -> function_call_exp .)
    PUTS            reduce using rule 74 (term -> function_call_exp .)
    RETURN          reduce using rule 74 (term -> function_call_exp .)
    ID              reduce using rule 74 (term -> function_call_exp .)
    LOOP            reduce using rule 74 (term -> function_call_exp .)
    FOR             reduce using rule 74 (term -> function_call_exp .)
    WHILE           reduce using rule 74 (term -> function_call_exp .)


state 61

    (75) term -> LPAREN . expression RPAREN
    (53) expression -> . expression AND or_exp
    (54) expression -> . or_exp
    (55) or_exp -> . or_exp OR comp_exp
    (56) or_exp -> . comp_exp
    (57) comp_exp -> . comp_exp comp_op op_arithmetic
    (58) comp_exp -> . op_arithmetic
    (65) op_arithmetic -> . op_arithmetic PLUS factor
    (66) op_arithmetic -> . op_arithmetic MINUS factor
    (67) op_arithmetic -> . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    expression                     shift and go to state 94
    or_exp                         shift and go to state 53
    comp_exp                       shift and go to state 54
    op_arithmetic                  shift and go to state 55
    factor                         shift and go to state 56
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 62

    (40) puts -> PUTS LPAREN . STRING RPAREN SEMICOLON

    STRING          shift and go to state 95


state 63

    (77) return -> RETURN expression . SEMICOLON
    (53) expression -> expression . AND or_exp

    SEMICOLON       shift and go to state 96
    AND             shift and go to state 79


state 64

    (48) loop_statement -> LOOP cmd_loop . END LOOP
    (38) cmd_loop -> cmd_loop . cmd
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    END             shift and go to state 97
    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    cmd                            shift and go to state 49
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 65

    (50) for_statement -> FOR ID . IN range LOOP cmd_loop END LOOP SEMICOLON

    IN              shift and go to state 98


state 66

    (49) while_statement -> WHILE expression . NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON
    (53) expression -> expression . AND or_exp

    NUMBER_INT      shift and go to state 99
    AND             shift and go to state 79


state 67

    (76) array -> TYPE ID IS . ARRAY LPAREN range RPAREN OF TYPE SEMICOLON

    ARRAY           shift and go to state 100


state 68

    (14) var -> var_loop ID COLON . TYPE

    TYPE            shift and go to state 101


state 69

    (16) var_loop -> var_loop ID COMMA .

    ID              reduce using rule 16 (var_loop -> var_loop ID COMMA .)


state 70

    (3) subprogram -> FUNCTION ID decl_param . IS decl body
    (4) subprogram -> FUNCTION ID decl_param . IS body

    IS              shift and go to state 102


state 71

    (18) decl_param -> LPAREN . param RPAREN
    (19) decl_param -> LPAREN . param RPAREN RETURN TYPE
    (20) param -> . ID COLON TYPE SEMICOLON param
    (21) param -> . ID COLON TYPE SEMICOLON

    ID              shift and go to state 104

    param                          shift and go to state 103

state 72

    (12) var -> ID COMMA TYPE ASSIGN . value
    (26) value -> . NUMBER_INT
    (27) value -> . NUMBER_FLOAT
    (28) value -> . NUMBER_EXPONENT
    (29) value -> . BOOLEAN
    (30) value -> . STRING
    (31) value -> . CHAR

    NUMBER_INT      shift and go to state 106
    NUMBER_FLOAT    shift and go to state 107
    NUMBER_EXPONENT shift and go to state 108
    BOOLEAN         shift and go to state 109
    STRING          shift and go to state 110
    CHAR            shift and go to state 111

    value                          shift and go to state 105

state 73

    (10) decl_loop -> var SEMICOLON decl_loop .

    BEGIN           reduce using rule 10 (decl_loop -> var SEMICOLON decl_loop .)


state 74

    (5) body -> BEGIN cmd_loop END ID . SEMICOLON

    SEMICOLON       shift and go to state 112


state 75

    (52) assign -> ID ASSIGN op_arithmetic . SEMICOLON
    (65) op_arithmetic -> op_arithmetic . PLUS factor
    (66) op_arithmetic -> op_arithmetic . MINUS factor

    SEMICOLON       shift and go to state 113
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 76

    (22) function_call -> ID LPAREN param_pass . RPAREN SEMICOLON

    RPAREN          shift and go to state 114


state 77

    (24) param_pass -> expression . COMMA param_pass
    (25) param_pass -> expression .
    (53) expression -> expression . AND or_exp

    COMMA           shift and go to state 115
    RPAREN          reduce using rule 25 (param_pass -> expression .)
    AND             shift and go to state 79


state 78

    (41) if_statement -> IF expression THEN . cmd_loop if_statement_loop
    (38) cmd_loop -> . cmd_loop cmd
    (39) cmd_loop -> . cmd
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    cmd_loop                       shift and go to state 116
    cmd                            shift and go to state 24
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 79

    (53) expression -> expression AND . or_exp
    (55) or_exp -> . or_exp OR comp_exp
    (56) or_exp -> . comp_exp
    (57) comp_exp -> . comp_exp comp_op op_arithmetic
    (58) comp_exp -> . op_arithmetic
    (65) op_arithmetic -> . op_arithmetic PLUS factor
    (66) op_arithmetic -> . op_arithmetic MINUS factor
    (67) op_arithmetic -> . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    or_exp                         shift and go to state 117
    comp_exp                       shift and go to state 54
    op_arithmetic                  shift and go to state 55
    factor                         shift and go to state 56
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 80

    (55) or_exp -> or_exp OR . comp_exp
    (57) comp_exp -> . comp_exp comp_op op_arithmetic
    (58) comp_exp -> . op_arithmetic
    (65) op_arithmetic -> . op_arithmetic PLUS factor
    (66) op_arithmetic -> . op_arithmetic MINUS factor
    (67) op_arithmetic -> . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    comp_exp                       shift and go to state 118
    op_arithmetic                  shift and go to state 55
    factor                         shift and go to state 56
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 81

    (57) comp_exp -> comp_exp comp_op . op_arithmetic
    (65) op_arithmetic -> . op_arithmetic PLUS factor
    (66) op_arithmetic -> . op_arithmetic MINUS factor
    (67) op_arithmetic -> . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    op_arithmetic                  shift and go to state 119
    factor                         shift and go to state 56
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 82

    (59) comp_op -> GREATERTHAN .

    ID              reduce using rule 59 (comp_op -> GREATERTHAN .)
    LPAREN          reduce using rule 59 (comp_op -> GREATERTHAN .)


state 83

    (60) comp_op -> GREATERTHANEQUAL .

    ID              reduce using rule 60 (comp_op -> GREATERTHANEQUAL .)
    LPAREN          reduce using rule 60 (comp_op -> GREATERTHANEQUAL .)


state 84

    (61) comp_op -> LESSTHAN .

    ID              reduce using rule 61 (comp_op -> LESSTHAN .)
    LPAREN          reduce using rule 61 (comp_op -> LESSTHAN .)


state 85

    (62) comp_op -> LESSTHANEQUAL .

    ID              reduce using rule 62 (comp_op -> LESSTHANEQUAL .)
    LPAREN          reduce using rule 62 (comp_op -> LESSTHANEQUAL .)


state 86

    (63) comp_op -> NOTEQUAL .

    ID              reduce using rule 63 (comp_op -> NOTEQUAL .)
    LPAREN          reduce using rule 63 (comp_op -> NOTEQUAL .)


state 87

    (64) comp_op -> EQUAL .

    ID              reduce using rule 64 (comp_op -> EQUAL .)
    LPAREN          reduce using rule 64 (comp_op -> EQUAL .)


state 88

    (65) op_arithmetic -> op_arithmetic PLUS . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    factor                         shift and go to state 120
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 89

    (66) op_arithmetic -> op_arithmetic MINUS . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    factor                         shift and go to state 121
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 90

    (68) factor -> factor TIMES . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    power                          shift and go to state 122
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 91

    (69) factor -> factor DIVIDE . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    power                          shift and go to state 123
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 92

    (71) power -> power POWER . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    term                           shift and go to state 124
    function_call_exp              shift and go to state 60

state 93

    (23) function_call_exp -> ID LPAREN . param_pass RPAREN
    (24) param_pass -> . expression COMMA param_pass
    (25) param_pass -> . expression
    (53) expression -> . expression AND or_exp
    (54) expression -> . or_exp
    (55) or_exp -> . or_exp OR comp_exp
    (56) or_exp -> . comp_exp
    (57) comp_exp -> . comp_exp comp_op op_arithmetic
    (58) comp_exp -> . op_arithmetic
    (65) op_arithmetic -> . op_arithmetic PLUS factor
    (66) op_arithmetic -> . op_arithmetic MINUS factor
    (67) op_arithmetic -> . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    param_pass                     shift and go to state 125
    expression                     shift and go to state 77
    or_exp                         shift and go to state 53
    comp_exp                       shift and go to state 54
    op_arithmetic                  shift and go to state 55
    factor                         shift and go to state 56
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 94

    (75) term -> LPAREN expression . RPAREN
    (53) expression -> expression . AND or_exp

    RPAREN          shift and go to state 126
    AND             shift and go to state 79


state 95

    (40) puts -> PUTS LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 127


state 96

    (77) return -> RETURN expression SEMICOLON .

    END             reduce using rule 77 (return -> RETURN expression SEMICOLON .)
    IF              reduce using rule 77 (return -> RETURN expression SEMICOLON .)
    PUTS            reduce using rule 77 (return -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 77 (return -> RETURN expression SEMICOLON .)
    ID              reduce using rule 77 (return -> RETURN expression SEMICOLON .)
    LOOP            reduce using rule 77 (return -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 77 (return -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 77 (return -> RETURN expression SEMICOLON .)
    ELSIF           reduce using rule 77 (return -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 77 (return -> RETURN expression SEMICOLON .)


state 97

    (48) loop_statement -> LOOP cmd_loop END . LOOP

    LOOP            shift and go to state 128


state 98

    (50) for_statement -> FOR ID IN . range LOOP cmd_loop END LOOP SEMICOLON
    (51) range -> . ID DOTDOT ID

    ID              shift and go to state 129

    range                          shift and go to state 130

state 99

    (49) while_statement -> WHILE expression NUMBER_INT . LOOP cmd_loop END LOOP SEMICOLON

    LOOP            shift and go to state 131


state 100

    (76) array -> TYPE ID IS ARRAY . LPAREN range RPAREN OF TYPE SEMICOLON

    LPAREN          shift and go to state 132


state 101

    (14) var -> var_loop ID COLON TYPE .

    SEMICOLON       reduce using rule 14 (var -> var_loop ID COLON TYPE .)


state 102

    (3) subprogram -> FUNCTION ID decl_param IS . decl body
    (4) subprogram -> FUNCTION ID decl_param IS . body
    (6) decl -> . var SEMICOLON decl_loop
    (7) decl -> . subprogram decl_loop
    (5) body -> . BEGIN cmd_loop END ID SEMICOLON
    (12) var -> . ID COMMA TYPE ASSIGN value
    (13) var -> . ID COLON TYPE
    (14) var -> . var_loop ID COLON TYPE
    (15) var -> . array
    (3) subprogram -> . FUNCTION ID decl_param IS decl body
    (4) subprogram -> . FUNCTION ID decl_param IS body
    (16) var_loop -> . var_loop ID COMMA
    (17) var_loop -> . ID COMMA
    (76) array -> . TYPE ID IS ARRAY LPAREN range RPAREN OF TYPE SEMICOLON

    BEGIN           shift and go to state 10
    ID              shift and go to state 5
    FUNCTION        shift and go to state 14
    TYPE            shift and go to state 11

    decl                           shift and go to state 133
    body                           shift and go to state 134
    var                            shift and go to state 8
    subprogram                     shift and go to state 9
    var_loop                       shift and go to state 12
    array                          shift and go to state 13

state 103

    (18) decl_param -> LPAREN param . RPAREN
    (19) decl_param -> LPAREN param . RPAREN RETURN TYPE

    RPAREN          shift and go to state 135


state 104

    (20) param -> ID . COLON TYPE SEMICOLON param
    (21) param -> ID . COLON TYPE SEMICOLON

    COLON           shift and go to state 136


state 105

    (12) var -> ID COMMA TYPE ASSIGN value .

    SEMICOLON       reduce using rule 12 (var -> ID COMMA TYPE ASSIGN value .)


state 106

    (26) value -> NUMBER_INT .

    SEMICOLON       reduce using rule 26 (value -> NUMBER_INT .)


state 107

    (27) value -> NUMBER_FLOAT .

    SEMICOLON       reduce using rule 27 (value -> NUMBER_FLOAT .)


state 108

    (28) value -> NUMBER_EXPONENT .

    SEMICOLON       reduce using rule 28 (value -> NUMBER_EXPONENT .)


state 109

    (29) value -> BOOLEAN .

    SEMICOLON       reduce using rule 29 (value -> BOOLEAN .)


state 110

    (30) value -> STRING .

    SEMICOLON       reduce using rule 30 (value -> STRING .)


state 111

    (31) value -> CHAR .

    SEMICOLON       reduce using rule 31 (value -> CHAR .)


state 112

    (5) body -> BEGIN cmd_loop END ID SEMICOLON .

    $end            reduce using rule 5 (body -> BEGIN cmd_loop END ID SEMICOLON .)
    FUNCTION        reduce using rule 5 (body -> BEGIN cmd_loop END ID SEMICOLON .)
    ID              reduce using rule 5 (body -> BEGIN cmd_loop END ID SEMICOLON .)
    TYPE            reduce using rule 5 (body -> BEGIN cmd_loop END ID SEMICOLON .)
    BEGIN           reduce using rule 5 (body -> BEGIN cmd_loop END ID SEMICOLON .)


state 113

    (52) assign -> ID ASSIGN op_arithmetic SEMICOLON .

    END             reduce using rule 52 (assign -> ID ASSIGN op_arithmetic SEMICOLON .)
    IF              reduce using rule 52 (assign -> ID ASSIGN op_arithmetic SEMICOLON .)
    PUTS            reduce using rule 52 (assign -> ID ASSIGN op_arithmetic SEMICOLON .)
    RETURN          reduce using rule 52 (assign -> ID ASSIGN op_arithmetic SEMICOLON .)
    ID              reduce using rule 52 (assign -> ID ASSIGN op_arithmetic SEMICOLON .)
    LOOP            reduce using rule 52 (assign -> ID ASSIGN op_arithmetic SEMICOLON .)
    FOR             reduce using rule 52 (assign -> ID ASSIGN op_arithmetic SEMICOLON .)
    WHILE           reduce using rule 52 (assign -> ID ASSIGN op_arithmetic SEMICOLON .)
    ELSIF           reduce using rule 52 (assign -> ID ASSIGN op_arithmetic SEMICOLON .)
    ELSE            reduce using rule 52 (assign -> ID ASSIGN op_arithmetic SEMICOLON .)


state 114

    (22) function_call -> ID LPAREN param_pass RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 137


state 115

    (24) param_pass -> expression COMMA . param_pass
    (24) param_pass -> . expression COMMA param_pass
    (25) param_pass -> . expression
    (53) expression -> . expression AND or_exp
    (54) expression -> . or_exp
    (55) or_exp -> . or_exp OR comp_exp
    (56) or_exp -> . comp_exp
    (57) comp_exp -> . comp_exp comp_op op_arithmetic
    (58) comp_exp -> . op_arithmetic
    (65) op_arithmetic -> . op_arithmetic PLUS factor
    (66) op_arithmetic -> . op_arithmetic MINUS factor
    (67) op_arithmetic -> . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    expression                     shift and go to state 77
    param_pass                     shift and go to state 138
    or_exp                         shift and go to state 53
    comp_exp                       shift and go to state 54
    op_arithmetic                  shift and go to state 55
    factor                         shift and go to state 56
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 116

    (41) if_statement -> IF expression THEN cmd_loop . if_statement_loop
    (38) cmd_loop -> cmd_loop . cmd
    (42) if_statement_loop -> . ELSIF expression cmd_loop if_statement_loop
    (43) if_statement_loop -> . ELSE expression cmd_loop END IF SEMICOLON
    (44) if_statement_loop -> . END IF SEMICOLON
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    ELSIF           shift and go to state 140
    ELSE            shift and go to state 141
    END             shift and go to state 142
    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    if_statement_loop              shift and go to state 139
    cmd                            shift and go to state 49
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 117

    (53) expression -> expression AND or_exp .
    (55) or_exp -> or_exp . OR comp_exp

    THEN            reduce using rule 53 (expression -> expression AND or_exp .)
    AND             reduce using rule 53 (expression -> expression AND or_exp .)
    SEMICOLON       reduce using rule 53 (expression -> expression AND or_exp .)
    NUMBER_INT      reduce using rule 53 (expression -> expression AND or_exp .)
    COMMA           reduce using rule 53 (expression -> expression AND or_exp .)
    RPAREN          reduce using rule 53 (expression -> expression AND or_exp .)
    IF              reduce using rule 53 (expression -> expression AND or_exp .)
    PUTS            reduce using rule 53 (expression -> expression AND or_exp .)
    RETURN          reduce using rule 53 (expression -> expression AND or_exp .)
    ID              reduce using rule 53 (expression -> expression AND or_exp .)
    LOOP            reduce using rule 53 (expression -> expression AND or_exp .)
    FOR             reduce using rule 53 (expression -> expression AND or_exp .)
    WHILE           reduce using rule 53 (expression -> expression AND or_exp .)
    OR              shift and go to state 80


state 118

    (55) or_exp -> or_exp OR comp_exp .
    (57) comp_exp -> comp_exp . comp_op op_arithmetic
    (59) comp_op -> . GREATERTHAN
    (60) comp_op -> . GREATERTHANEQUAL
    (61) comp_op -> . LESSTHAN
    (62) comp_op -> . LESSTHANEQUAL
    (63) comp_op -> . NOTEQUAL
    (64) comp_op -> . EQUAL

    OR              reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    THEN            reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    AND             reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    SEMICOLON       reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    NUMBER_INT      reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    COMMA           reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    RPAREN          reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    IF              reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    PUTS            reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    RETURN          reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    ID              reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    LOOP            reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    FOR             reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    WHILE           reduce using rule 55 (or_exp -> or_exp OR comp_exp .)
    GREATERTHAN     shift and go to state 82
    GREATERTHANEQUAL shift and go to state 83
    LESSTHAN        shift and go to state 84
    LESSTHANEQUAL   shift and go to state 85
    NOTEQUAL        shift and go to state 86
    EQUAL           shift and go to state 87

    comp_op                        shift and go to state 81

state 119

    (57) comp_exp -> comp_exp comp_op op_arithmetic .
    (65) op_arithmetic -> op_arithmetic . PLUS factor
    (66) op_arithmetic -> op_arithmetic . MINUS factor

    GREATERTHAN     reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    GREATERTHANEQUAL reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    LESSTHAN        reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    LESSTHANEQUAL   reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    NOTEQUAL        reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    EQUAL           reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    OR              reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    THEN            reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    AND             reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    SEMICOLON       reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    NUMBER_INT      reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    COMMA           reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    RPAREN          reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    IF              reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    PUTS            reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    RETURN          reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    ID              reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    LOOP            reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    FOR             reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    WHILE           reduce using rule 57 (comp_exp -> comp_exp comp_op op_arithmetic .)
    PLUS            shift and go to state 88
    MINUS           shift and go to state 89


state 120

    (65) op_arithmetic -> op_arithmetic PLUS factor .
    (68) factor -> factor . TIMES power
    (69) factor -> factor . DIVIDE power

    PLUS            reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    MINUS           reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    GREATERTHAN     reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    GREATERTHANEQUAL reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    LESSTHAN        reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    LESSTHANEQUAL   reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    NOTEQUAL        reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    EQUAL           reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    OR              reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    THEN            reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    AND             reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    SEMICOLON       reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    NUMBER_INT      reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    COMMA           reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    RPAREN          reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    IF              reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    PUTS            reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    RETURN          reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    ID              reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    LOOP            reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    FOR             reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    WHILE           reduce using rule 65 (op_arithmetic -> op_arithmetic PLUS factor .)
    TIMES           shift and go to state 90
    DIVIDE          shift and go to state 91


state 121

    (66) op_arithmetic -> op_arithmetic MINUS factor .
    (68) factor -> factor . TIMES power
    (69) factor -> factor . DIVIDE power

    PLUS            reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    MINUS           reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    GREATERTHAN     reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    GREATERTHANEQUAL reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    LESSTHAN        reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    LESSTHANEQUAL   reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    NOTEQUAL        reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    EQUAL           reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    OR              reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    THEN            reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    AND             reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    SEMICOLON       reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    NUMBER_INT      reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    COMMA           reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    RPAREN          reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    IF              reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    PUTS            reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    RETURN          reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    ID              reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    LOOP            reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    FOR             reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    WHILE           reduce using rule 66 (op_arithmetic -> op_arithmetic MINUS factor .)
    TIMES           shift and go to state 90
    DIVIDE          shift and go to state 91


state 122

    (68) factor -> factor TIMES power .
    (71) power -> power . POWER term

    TIMES           reduce using rule 68 (factor -> factor TIMES power .)
    DIVIDE          reduce using rule 68 (factor -> factor TIMES power .)
    PLUS            reduce using rule 68 (factor -> factor TIMES power .)
    MINUS           reduce using rule 68 (factor -> factor TIMES power .)
    GREATERTHAN     reduce using rule 68 (factor -> factor TIMES power .)
    GREATERTHANEQUAL reduce using rule 68 (factor -> factor TIMES power .)
    LESSTHAN        reduce using rule 68 (factor -> factor TIMES power .)
    LESSTHANEQUAL   reduce using rule 68 (factor -> factor TIMES power .)
    NOTEQUAL        reduce using rule 68 (factor -> factor TIMES power .)
    EQUAL           reduce using rule 68 (factor -> factor TIMES power .)
    OR              reduce using rule 68 (factor -> factor TIMES power .)
    THEN            reduce using rule 68 (factor -> factor TIMES power .)
    AND             reduce using rule 68 (factor -> factor TIMES power .)
    SEMICOLON       reduce using rule 68 (factor -> factor TIMES power .)
    NUMBER_INT      reduce using rule 68 (factor -> factor TIMES power .)
    COMMA           reduce using rule 68 (factor -> factor TIMES power .)
    RPAREN          reduce using rule 68 (factor -> factor TIMES power .)
    IF              reduce using rule 68 (factor -> factor TIMES power .)
    PUTS            reduce using rule 68 (factor -> factor TIMES power .)
    RETURN          reduce using rule 68 (factor -> factor TIMES power .)
    ID              reduce using rule 68 (factor -> factor TIMES power .)
    LOOP            reduce using rule 68 (factor -> factor TIMES power .)
    FOR             reduce using rule 68 (factor -> factor TIMES power .)
    WHILE           reduce using rule 68 (factor -> factor TIMES power .)
    POWER           shift and go to state 92


state 123

    (69) factor -> factor DIVIDE power .
    (71) power -> power . POWER term

    TIMES           reduce using rule 69 (factor -> factor DIVIDE power .)
    DIVIDE          reduce using rule 69 (factor -> factor DIVIDE power .)
    PLUS            reduce using rule 69 (factor -> factor DIVIDE power .)
    MINUS           reduce using rule 69 (factor -> factor DIVIDE power .)
    GREATERTHAN     reduce using rule 69 (factor -> factor DIVIDE power .)
    GREATERTHANEQUAL reduce using rule 69 (factor -> factor DIVIDE power .)
    LESSTHAN        reduce using rule 69 (factor -> factor DIVIDE power .)
    LESSTHANEQUAL   reduce using rule 69 (factor -> factor DIVIDE power .)
    NOTEQUAL        reduce using rule 69 (factor -> factor DIVIDE power .)
    EQUAL           reduce using rule 69 (factor -> factor DIVIDE power .)
    OR              reduce using rule 69 (factor -> factor DIVIDE power .)
    THEN            reduce using rule 69 (factor -> factor DIVIDE power .)
    AND             reduce using rule 69 (factor -> factor DIVIDE power .)
    SEMICOLON       reduce using rule 69 (factor -> factor DIVIDE power .)
    NUMBER_INT      reduce using rule 69 (factor -> factor DIVIDE power .)
    COMMA           reduce using rule 69 (factor -> factor DIVIDE power .)
    RPAREN          reduce using rule 69 (factor -> factor DIVIDE power .)
    IF              reduce using rule 69 (factor -> factor DIVIDE power .)
    PUTS            reduce using rule 69 (factor -> factor DIVIDE power .)
    RETURN          reduce using rule 69 (factor -> factor DIVIDE power .)
    ID              reduce using rule 69 (factor -> factor DIVIDE power .)
    LOOP            reduce using rule 69 (factor -> factor DIVIDE power .)
    FOR             reduce using rule 69 (factor -> factor DIVIDE power .)
    WHILE           reduce using rule 69 (factor -> factor DIVIDE power .)
    POWER           shift and go to state 92


state 124

    (71) power -> power POWER term .

    POWER           reduce using rule 71 (power -> power POWER term .)
    TIMES           reduce using rule 71 (power -> power POWER term .)
    DIVIDE          reduce using rule 71 (power -> power POWER term .)
    PLUS            reduce using rule 71 (power -> power POWER term .)
    MINUS           reduce using rule 71 (power -> power POWER term .)
    GREATERTHAN     reduce using rule 71 (power -> power POWER term .)
    GREATERTHANEQUAL reduce using rule 71 (power -> power POWER term .)
    LESSTHAN        reduce using rule 71 (power -> power POWER term .)
    LESSTHANEQUAL   reduce using rule 71 (power -> power POWER term .)
    NOTEQUAL        reduce using rule 71 (power -> power POWER term .)
    EQUAL           reduce using rule 71 (power -> power POWER term .)
    OR              reduce using rule 71 (power -> power POWER term .)
    THEN            reduce using rule 71 (power -> power POWER term .)
    AND             reduce using rule 71 (power -> power POWER term .)
    SEMICOLON       reduce using rule 71 (power -> power POWER term .)
    NUMBER_INT      reduce using rule 71 (power -> power POWER term .)
    COMMA           reduce using rule 71 (power -> power POWER term .)
    RPAREN          reduce using rule 71 (power -> power POWER term .)
    IF              reduce using rule 71 (power -> power POWER term .)
    PUTS            reduce using rule 71 (power -> power POWER term .)
    RETURN          reduce using rule 71 (power -> power POWER term .)
    ID              reduce using rule 71 (power -> power POWER term .)
    LOOP            reduce using rule 71 (power -> power POWER term .)
    FOR             reduce using rule 71 (power -> power POWER term .)
    WHILE           reduce using rule 71 (power -> power POWER term .)


state 125

    (23) function_call_exp -> ID LPAREN param_pass . RPAREN

    RPAREN          shift and go to state 143


state 126

    (75) term -> LPAREN expression RPAREN .

    POWER           reduce using rule 75 (term -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 75 (term -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 75 (term -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 75 (term -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 75 (term -> LPAREN expression RPAREN .)
    GREATERTHAN     reduce using rule 75 (term -> LPAREN expression RPAREN .)
    GREATERTHANEQUAL reduce using rule 75 (term -> LPAREN expression RPAREN .)
    LESSTHAN        reduce using rule 75 (term -> LPAREN expression RPAREN .)
    LESSTHANEQUAL   reduce using rule 75 (term -> LPAREN expression RPAREN .)
    NOTEQUAL        reduce using rule 75 (term -> LPAREN expression RPAREN .)
    EQUAL           reduce using rule 75 (term -> LPAREN expression RPAREN .)
    OR              reduce using rule 75 (term -> LPAREN expression RPAREN .)
    THEN            reduce using rule 75 (term -> LPAREN expression RPAREN .)
    AND             reduce using rule 75 (term -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 75 (term -> LPAREN expression RPAREN .)
    NUMBER_INT      reduce using rule 75 (term -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 75 (term -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 75 (term -> LPAREN expression RPAREN .)
    IF              reduce using rule 75 (term -> LPAREN expression RPAREN .)
    PUTS            reduce using rule 75 (term -> LPAREN expression RPAREN .)
    RETURN          reduce using rule 75 (term -> LPAREN expression RPAREN .)
    ID              reduce using rule 75 (term -> LPAREN expression RPAREN .)
    LOOP            reduce using rule 75 (term -> LPAREN expression RPAREN .)
    FOR             reduce using rule 75 (term -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 75 (term -> LPAREN expression RPAREN .)


state 127

    (40) puts -> PUTS LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 144


state 128

    (48) loop_statement -> LOOP cmd_loop END LOOP .

    END             reduce using rule 48 (loop_statement -> LOOP cmd_loop END LOOP .)
    IF              reduce using rule 48 (loop_statement -> LOOP cmd_loop END LOOP .)
    PUTS            reduce using rule 48 (loop_statement -> LOOP cmd_loop END LOOP .)
    RETURN          reduce using rule 48 (loop_statement -> LOOP cmd_loop END LOOP .)
    ID              reduce using rule 48 (loop_statement -> LOOP cmd_loop END LOOP .)
    LOOP            reduce using rule 48 (loop_statement -> LOOP cmd_loop END LOOP .)
    FOR             reduce using rule 48 (loop_statement -> LOOP cmd_loop END LOOP .)
    WHILE           reduce using rule 48 (loop_statement -> LOOP cmd_loop END LOOP .)
    ELSIF           reduce using rule 48 (loop_statement -> LOOP cmd_loop END LOOP .)
    ELSE            reduce using rule 48 (loop_statement -> LOOP cmd_loop END LOOP .)


state 129

    (51) range -> ID . DOTDOT ID

    DOTDOT          shift and go to state 145


state 130

    (50) for_statement -> FOR ID IN range . LOOP cmd_loop END LOOP SEMICOLON

    LOOP            shift and go to state 146


state 131

    (49) while_statement -> WHILE expression NUMBER_INT LOOP . cmd_loop END LOOP SEMICOLON
    (38) cmd_loop -> . cmd_loop cmd
    (39) cmd_loop -> . cmd
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    cmd_loop                       shift and go to state 147
    cmd                            shift and go to state 24
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 132

    (76) array -> TYPE ID IS ARRAY LPAREN . range RPAREN OF TYPE SEMICOLON
    (51) range -> . ID DOTDOT ID

    ID              shift and go to state 129

    range                          shift and go to state 148

state 133

    (3) subprogram -> FUNCTION ID decl_param IS decl . body
    (5) body -> . BEGIN cmd_loop END ID SEMICOLON

    BEGIN           shift and go to state 10

    body                           shift and go to state 149

state 134

    (4) subprogram -> FUNCTION ID decl_param IS body .

    FUNCTION        reduce using rule 4 (subprogram -> FUNCTION ID decl_param IS body .)
    ID              reduce using rule 4 (subprogram -> FUNCTION ID decl_param IS body .)
    TYPE            reduce using rule 4 (subprogram -> FUNCTION ID decl_param IS body .)
    BEGIN           reduce using rule 4 (subprogram -> FUNCTION ID decl_param IS body .)


state 135

    (18) decl_param -> LPAREN param RPAREN .
    (19) decl_param -> LPAREN param RPAREN . RETURN TYPE

    IS              reduce using rule 18 (decl_param -> LPAREN param RPAREN .)
    RETURN          shift and go to state 150


state 136

    (20) param -> ID COLON . TYPE SEMICOLON param
    (21) param -> ID COLON . TYPE SEMICOLON

    TYPE            shift and go to state 151


state 137

    (22) function_call -> ID LPAREN param_pass RPAREN SEMICOLON .

    END             reduce using rule 22 (function_call -> ID LPAREN param_pass RPAREN SEMICOLON .)
    IF              reduce using rule 22 (function_call -> ID LPAREN param_pass RPAREN SEMICOLON .)
    PUTS            reduce using rule 22 (function_call -> ID LPAREN param_pass RPAREN SEMICOLON .)
    RETURN          reduce using rule 22 (function_call -> ID LPAREN param_pass RPAREN SEMICOLON .)
    ID              reduce using rule 22 (function_call -> ID LPAREN param_pass RPAREN SEMICOLON .)
    LOOP            reduce using rule 22 (function_call -> ID LPAREN param_pass RPAREN SEMICOLON .)
    FOR             reduce using rule 22 (function_call -> ID LPAREN param_pass RPAREN SEMICOLON .)
    WHILE           reduce using rule 22 (function_call -> ID LPAREN param_pass RPAREN SEMICOLON .)
    ELSIF           reduce using rule 22 (function_call -> ID LPAREN param_pass RPAREN SEMICOLON .)
    ELSE            reduce using rule 22 (function_call -> ID LPAREN param_pass RPAREN SEMICOLON .)


state 138

    (24) param_pass -> expression COMMA param_pass .

    RPAREN          reduce using rule 24 (param_pass -> expression COMMA param_pass .)


state 139

    (41) if_statement -> IF expression THEN cmd_loop if_statement_loop .

    END             reduce using rule 41 (if_statement -> IF expression THEN cmd_loop if_statement_loop .)
    IF              reduce using rule 41 (if_statement -> IF expression THEN cmd_loop if_statement_loop .)
    PUTS            reduce using rule 41 (if_statement -> IF expression THEN cmd_loop if_statement_loop .)
    RETURN          reduce using rule 41 (if_statement -> IF expression THEN cmd_loop if_statement_loop .)
    ID              reduce using rule 41 (if_statement -> IF expression THEN cmd_loop if_statement_loop .)
    LOOP            reduce using rule 41 (if_statement -> IF expression THEN cmd_loop if_statement_loop .)
    FOR             reduce using rule 41 (if_statement -> IF expression THEN cmd_loop if_statement_loop .)
    WHILE           reduce using rule 41 (if_statement -> IF expression THEN cmd_loop if_statement_loop .)
    ELSIF           reduce using rule 41 (if_statement -> IF expression THEN cmd_loop if_statement_loop .)
    ELSE            reduce using rule 41 (if_statement -> IF expression THEN cmd_loop if_statement_loop .)


state 140

    (42) if_statement_loop -> ELSIF . expression cmd_loop if_statement_loop
    (53) expression -> . expression AND or_exp
    (54) expression -> . or_exp
    (55) or_exp -> . or_exp OR comp_exp
    (56) or_exp -> . comp_exp
    (57) comp_exp -> . comp_exp comp_op op_arithmetic
    (58) comp_exp -> . op_arithmetic
    (65) op_arithmetic -> . op_arithmetic PLUS factor
    (66) op_arithmetic -> . op_arithmetic MINUS factor
    (67) op_arithmetic -> . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    expression                     shift and go to state 152
    or_exp                         shift and go to state 53
    comp_exp                       shift and go to state 54
    op_arithmetic                  shift and go to state 55
    factor                         shift and go to state 56
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 141

    (43) if_statement_loop -> ELSE . expression cmd_loop END IF SEMICOLON
    (53) expression -> . expression AND or_exp
    (54) expression -> . or_exp
    (55) or_exp -> . or_exp OR comp_exp
    (56) or_exp -> . comp_exp
    (57) comp_exp -> . comp_exp comp_op op_arithmetic
    (58) comp_exp -> . op_arithmetic
    (65) op_arithmetic -> . op_arithmetic PLUS factor
    (66) op_arithmetic -> . op_arithmetic MINUS factor
    (67) op_arithmetic -> . factor
    (68) factor -> . factor TIMES power
    (69) factor -> . factor DIVIDE power
    (70) factor -> . power
    (71) power -> . power POWER term
    (72) power -> . term
    (73) term -> . ID
    (74) term -> . function_call_exp
    (75) term -> . LPAREN expression RPAREN
    (23) function_call_exp -> . ID LPAREN param_pass RPAREN

    ID              shift and go to state 59
    LPAREN          shift and go to state 61

    expression                     shift and go to state 153
    or_exp                         shift and go to state 53
    comp_exp                       shift and go to state 54
    op_arithmetic                  shift and go to state 55
    factor                         shift and go to state 56
    power                          shift and go to state 57
    term                           shift and go to state 58
    function_call_exp              shift and go to state 60

state 142

    (44) if_statement_loop -> END . IF SEMICOLON

    IF              shift and go to state 154


state 143

    (23) function_call_exp -> ID LPAREN param_pass RPAREN .

    POWER           reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    TIMES           reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    DIVIDE          reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    PLUS            reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    MINUS           reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    GREATERTHAN     reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    GREATERTHANEQUAL reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    LESSTHAN        reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    LESSTHANEQUAL   reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    NOTEQUAL        reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    EQUAL           reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    OR              reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    THEN            reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    AND             reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    SEMICOLON       reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    NUMBER_INT      reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    COMMA           reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    RPAREN          reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    IF              reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    PUTS            reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    RETURN          reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    ID              reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    LOOP            reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    FOR             reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)
    WHILE           reduce using rule 23 (function_call_exp -> ID LPAREN param_pass RPAREN .)


state 144

    (40) puts -> PUTS LPAREN STRING RPAREN SEMICOLON .

    END             reduce using rule 40 (puts -> PUTS LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 40 (puts -> PUTS LPAREN STRING RPAREN SEMICOLON .)
    PUTS            reduce using rule 40 (puts -> PUTS LPAREN STRING RPAREN SEMICOLON .)
    RETURN          reduce using rule 40 (puts -> PUTS LPAREN STRING RPAREN SEMICOLON .)
    ID              reduce using rule 40 (puts -> PUTS LPAREN STRING RPAREN SEMICOLON .)
    LOOP            reduce using rule 40 (puts -> PUTS LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 40 (puts -> PUTS LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 40 (puts -> PUTS LPAREN STRING RPAREN SEMICOLON .)
    ELSIF           reduce using rule 40 (puts -> PUTS LPAREN STRING RPAREN SEMICOLON .)
    ELSE            reduce using rule 40 (puts -> PUTS LPAREN STRING RPAREN SEMICOLON .)


state 145

    (51) range -> ID DOTDOT . ID

    ID              shift and go to state 155


state 146

    (50) for_statement -> FOR ID IN range LOOP . cmd_loop END LOOP SEMICOLON
    (38) cmd_loop -> . cmd_loop cmd
    (39) cmd_loop -> . cmd
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    cmd_loop                       shift and go to state 156
    cmd                            shift and go to state 24
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 147

    (49) while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop . END LOOP SEMICOLON
    (38) cmd_loop -> cmd_loop . cmd
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    END             shift and go to state 157
    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    cmd                            shift and go to state 49
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 148

    (76) array -> TYPE ID IS ARRAY LPAREN range . RPAREN OF TYPE SEMICOLON

    RPAREN          shift and go to state 158


state 149

    (3) subprogram -> FUNCTION ID decl_param IS decl body .

    FUNCTION        reduce using rule 3 (subprogram -> FUNCTION ID decl_param IS decl body .)
    ID              reduce using rule 3 (subprogram -> FUNCTION ID decl_param IS decl body .)
    TYPE            reduce using rule 3 (subprogram -> FUNCTION ID decl_param IS decl body .)
    BEGIN           reduce using rule 3 (subprogram -> FUNCTION ID decl_param IS decl body .)


state 150

    (19) decl_param -> LPAREN param RPAREN RETURN . TYPE

    TYPE            shift and go to state 159


state 151

    (20) param -> ID COLON TYPE . SEMICOLON param
    (21) param -> ID COLON TYPE . SEMICOLON

    SEMICOLON       shift and go to state 160


state 152

    (42) if_statement_loop -> ELSIF expression . cmd_loop if_statement_loop
    (53) expression -> expression . AND or_exp
    (38) cmd_loop -> . cmd_loop cmd
    (39) cmd_loop -> . cmd
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    AND             shift and go to state 79
    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    cmd_loop                       shift and go to state 161
    cmd                            shift and go to state 24
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 153

    (43) if_statement_loop -> ELSE expression . cmd_loop END IF SEMICOLON
    (53) expression -> expression . AND or_exp
    (38) cmd_loop -> . cmd_loop cmd
    (39) cmd_loop -> . cmd
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    AND             shift and go to state 79
    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    cmd_loop                       shift and go to state 162
    cmd                            shift and go to state 24
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 154

    (44) if_statement_loop -> END IF . SEMICOLON

    SEMICOLON       shift and go to state 163


state 155

    (51) range -> ID DOTDOT ID .

    LOOP            reduce using rule 51 (range -> ID DOTDOT ID .)
    RPAREN          reduce using rule 51 (range -> ID DOTDOT ID .)


state 156

    (50) for_statement -> FOR ID IN range LOOP cmd_loop . END LOOP SEMICOLON
    (38) cmd_loop -> cmd_loop . cmd
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    END             shift and go to state 164
    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    cmd                            shift and go to state 49
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 157

    (49) while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END . LOOP SEMICOLON

    LOOP            shift and go to state 165


state 158

    (76) array -> TYPE ID IS ARRAY LPAREN range RPAREN . OF TYPE SEMICOLON

    OF              shift and go to state 166


state 159

    (19) decl_param -> LPAREN param RPAREN RETURN TYPE .

    IS              reduce using rule 19 (decl_param -> LPAREN param RPAREN RETURN TYPE .)


state 160

    (20) param -> ID COLON TYPE SEMICOLON . param
    (21) param -> ID COLON TYPE SEMICOLON .
    (20) param -> . ID COLON TYPE SEMICOLON param
    (21) param -> . ID COLON TYPE SEMICOLON

    RPAREN          reduce using rule 21 (param -> ID COLON TYPE SEMICOLON .)
    ID              shift and go to state 104

    param                          shift and go to state 167

state 161

    (42) if_statement_loop -> ELSIF expression cmd_loop . if_statement_loop
    (38) cmd_loop -> cmd_loop . cmd
    (42) if_statement_loop -> . ELSIF expression cmd_loop if_statement_loop
    (43) if_statement_loop -> . ELSE expression cmd_loop END IF SEMICOLON
    (44) if_statement_loop -> . END IF SEMICOLON
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    ELSIF           shift and go to state 140
    ELSE            shift and go to state 141
    END             shift and go to state 142
    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    if_statement_loop              shift and go to state 168
    cmd                            shift and go to state 49
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 162

    (43) if_statement_loop -> ELSE expression cmd_loop . END IF SEMICOLON
    (38) cmd_loop -> cmd_loop . cmd
    (32) cmd -> . if_statement
    (33) cmd -> . repeat_statement
    (34) cmd -> . puts
    (35) cmd -> . return
    (36) cmd -> . assign
    (37) cmd -> . function_call
    (41) if_statement -> . IF expression THEN cmd_loop if_statement_loop
    (45) repeat_statement -> . loop_statement
    (46) repeat_statement -> . for_statement
    (47) repeat_statement -> . while_statement
    (40) puts -> . PUTS LPAREN STRING RPAREN SEMICOLON
    (77) return -> . RETURN expression SEMICOLON
    (52) assign -> . ID ASSIGN op_arithmetic SEMICOLON
    (22) function_call -> . ID LPAREN param_pass RPAREN SEMICOLON
    (48) loop_statement -> . LOOP cmd_loop END LOOP
    (50) for_statement -> . FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON
    (49) while_statement -> . WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON

    END             shift and go to state 169
    IF              shift and go to state 31
    PUTS            shift and go to state 35
    RETURN          shift and go to state 36
    ID              shift and go to state 23
    LOOP            shift and go to state 37
    FOR             shift and go to state 38
    WHILE           shift and go to state 39

    cmd                            shift and go to state 49
    if_statement                   shift and go to state 25
    repeat_statement               shift and go to state 26
    puts                           shift and go to state 27
    return                         shift and go to state 28
    assign                         shift and go to state 29
    function_call                  shift and go to state 30
    loop_statement                 shift and go to state 32
    for_statement                  shift and go to state 33
    while_statement                shift and go to state 34

state 163

    (44) if_statement_loop -> END IF SEMICOLON .

    END             reduce using rule 44 (if_statement_loop -> END IF SEMICOLON .)
    IF              reduce using rule 44 (if_statement_loop -> END IF SEMICOLON .)
    PUTS            reduce using rule 44 (if_statement_loop -> END IF SEMICOLON .)
    RETURN          reduce using rule 44 (if_statement_loop -> END IF SEMICOLON .)
    ID              reduce using rule 44 (if_statement_loop -> END IF SEMICOLON .)
    LOOP            reduce using rule 44 (if_statement_loop -> END IF SEMICOLON .)
    FOR             reduce using rule 44 (if_statement_loop -> END IF SEMICOLON .)
    WHILE           reduce using rule 44 (if_statement_loop -> END IF SEMICOLON .)
    ELSIF           reduce using rule 44 (if_statement_loop -> END IF SEMICOLON .)
    ELSE            reduce using rule 44 (if_statement_loop -> END IF SEMICOLON .)


state 164

    (50) for_statement -> FOR ID IN range LOOP cmd_loop END . LOOP SEMICOLON

    LOOP            shift and go to state 170


state 165

    (49) while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP . SEMICOLON

    SEMICOLON       shift and go to state 171


state 166

    (76) array -> TYPE ID IS ARRAY LPAREN range RPAREN OF . TYPE SEMICOLON

    TYPE            shift and go to state 172


state 167

    (20) param -> ID COLON TYPE SEMICOLON param .

    RPAREN          reduce using rule 20 (param -> ID COLON TYPE SEMICOLON param .)


state 168

    (42) if_statement_loop -> ELSIF expression cmd_loop if_statement_loop .

    END             reduce using rule 42 (if_statement_loop -> ELSIF expression cmd_loop if_statement_loop .)
    IF              reduce using rule 42 (if_statement_loop -> ELSIF expression cmd_loop if_statement_loop .)
    PUTS            reduce using rule 42 (if_statement_loop -> ELSIF expression cmd_loop if_statement_loop .)
    RETURN          reduce using rule 42 (if_statement_loop -> ELSIF expression cmd_loop if_statement_loop .)
    ID              reduce using rule 42 (if_statement_loop -> ELSIF expression cmd_loop if_statement_loop .)
    LOOP            reduce using rule 42 (if_statement_loop -> ELSIF expression cmd_loop if_statement_loop .)
    FOR             reduce using rule 42 (if_statement_loop -> ELSIF expression cmd_loop if_statement_loop .)
    WHILE           reduce using rule 42 (if_statement_loop -> ELSIF expression cmd_loop if_statement_loop .)
    ELSIF           reduce using rule 42 (if_statement_loop -> ELSIF expression cmd_loop if_statement_loop .)
    ELSE            reduce using rule 42 (if_statement_loop -> ELSIF expression cmd_loop if_statement_loop .)


state 169

    (43) if_statement_loop -> ELSE expression cmd_loop END . IF SEMICOLON

    IF              shift and go to state 173


state 170

    (50) for_statement -> FOR ID IN range LOOP cmd_loop END LOOP . SEMICOLON

    SEMICOLON       shift and go to state 174


state 171

    (49) while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON .

    END             reduce using rule 49 (while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON .)
    IF              reduce using rule 49 (while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON .)
    PUTS            reduce using rule 49 (while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON .)
    RETURN          reduce using rule 49 (while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON .)
    ID              reduce using rule 49 (while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON .)
    LOOP            reduce using rule 49 (while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON .)
    FOR             reduce using rule 49 (while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON .)
    WHILE           reduce using rule 49 (while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON .)
    ELSIF           reduce using rule 49 (while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON .)
    ELSE            reduce using rule 49 (while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON .)


state 172

    (76) array -> TYPE ID IS ARRAY LPAREN range RPAREN OF TYPE . SEMICOLON

    SEMICOLON       shift and go to state 175


state 173

    (43) if_statement_loop -> ELSE expression cmd_loop END IF . SEMICOLON

    SEMICOLON       shift and go to state 176


state 174

    (50) for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON .

    END             reduce using rule 50 (for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON .)
    IF              reduce using rule 50 (for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON .)
    PUTS            reduce using rule 50 (for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON .)
    RETURN          reduce using rule 50 (for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON .)
    ID              reduce using rule 50 (for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON .)
    LOOP            reduce using rule 50 (for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON .)
    FOR             reduce using rule 50 (for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON .)
    WHILE           reduce using rule 50 (for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON .)
    ELSIF           reduce using rule 50 (for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON .)
    ELSE            reduce using rule 50 (for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON .)


state 175

    (76) array -> TYPE ID IS ARRAY LPAREN range RPAREN OF TYPE SEMICOLON .

    SEMICOLON       reduce using rule 76 (array -> TYPE ID IS ARRAY LPAREN range RPAREN OF TYPE SEMICOLON .)


state 176

    (43) if_statement_loop -> ELSE expression cmd_loop END IF SEMICOLON .

    END             reduce using rule 43 (if_statement_loop -> ELSE expression cmd_loop END IF SEMICOLON .)
    IF              reduce using rule 43 (if_statement_loop -> ELSE expression cmd_loop END IF SEMICOLON .)
    PUTS            reduce using rule 43 (if_statement_loop -> ELSE expression cmd_loop END IF SEMICOLON .)
    RETURN          reduce using rule 43 (if_statement_loop -> ELSE expression cmd_loop END IF SEMICOLON .)
    ID              reduce using rule 43 (if_statement_loop -> ELSE expression cmd_loop END IF SEMICOLON .)
    LOOP            reduce using rule 43 (if_statement_loop -> ELSE expression cmd_loop END IF SEMICOLON .)
    FOR             reduce using rule 43 (if_statement_loop -> ELSE expression cmd_loop END IF SEMICOLON .)
    WHILE           reduce using rule 43 (if_statement_loop -> ELSE expression cmd_loop END IF SEMICOLON .)
    ELSIF           reduce using rule 43 (if_statement_loop -> ELSE expression cmd_loop END IF SEMICOLON .)
    ELSE            reduce using rule 43 (if_statement_loop -> ELSE expression cmd_loop END IF SEMICOLON .)

