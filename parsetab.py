
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN CHAR CHARACTER COLON COMMA DIVIDE DOTDOT ELSE ELSIF END EQUAL FALSE FLOAT FOR FUNCTION GREATERTHAN GREATERTHANEQUAL ID IF IN INTEGER IS LESSTHAN LESSTHANEQUAL LOOP LPAREN MINUS NOTEQUAL NUMBER_FLOAT NUMBER_INT OF OR PLUS POWER PROCEDURE PUTS RETURN RPAREN SEMICOLON STR STRING THEN TIMES TRUE TYPE WHILEprogram : subprogram\n               | subprogram program\n    subprogram : FUNCTION ID decl_param IS body\n                  | PROCEDURE ID IS decl body\n                  | PROCEDURE ID IS body\n     body : BEGIN cmd_loop END ID SEMICOLON\n     decl : var SEMICOLON decl\n             | var SEMICOLON\n     var : ID COLON type ASSIGN term\n\t\t\t| ID COLON type\n\t\t\t| var_loop ID COLON type\n\t\t\t| array\n     var_loop : var_loop ID COMMA\n                 | ID COMMA\n     type : BOOLEAN\n             | CHARACTER\n             | FLOAT\n             | INTEGER\n             | STRING\n     decl_param : LPAREN param RPAREN\n                   | LPAREN param RPAREN RETURN type\n     param : ID COLON type SEMICOLON param\n              | ID COLON type SEMICOLON\n     function_call : ID LPAREN param_pass RPAREN SEMICOLON\n                      | ID LPAREN RPAREN SEMICOLON\n     function_call_exp : ID LPAREN param_pass RPAREN\n                          | ID LPAREN RPAREN\n     param_pass : expression COMMA param_pass\n                   | expression\n     cmd : if_statement\n\t\t\t| repeat_statement\n\t\t\t| puts\n\t\t\t| return\n\t\t\t| assign\n\t\t\t| function_call\n    cmd_loop : cmd_loop cmd\n                | cmd\n     puts : PUTS LPAREN STR RPAREN SEMICOLON\n     if_statement : IF expression THEN cmd_loop if_statement_loop\n     if_statement_loop : ELSIF expression cmd_loop if_statement_loop\n                          | ELSE cmd_loop END IF SEMICOLON\n                          | END IF SEMICOLON\n     repeat_statement : loop_statement\n                         | for_statement\n                         | while_statement\n     loop_statement : LOOP cmd_loop END LOOP SEMICOLON\n     while_statement : WHILE expression LOOP cmd_loop END LOOP SEMICOLON\n     for_statement : FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON\n     range : NUMBER_INT DOTDOT NUMBER_INT\n     assign : ID ASSIGN op_arithmetic SEMICOLON\n     expression : expression AND or_exp\n                   | or_exp\n     or_exp : or_exp OR comp_exp\n               | comp_exp\n     comp_exp : comp_exp comp_op op_arithmetic\n                 | op_arithmetic\n     comp_op : GREATERTHAN\n                | GREATERTHANEQUAL\n                | LESSTHAN\n                | LESSTHANEQUAL\n                | NOTEQUAL\n                | EQUAL \n     op_arithmetic : op_arithmetic PLUS factor\n                      | op_arithmetic MINUS factor\n                      | factor\n     factor : factor TIMES power\n               | factor DIVIDE power\n               | power\n     power : power POWER unary\n              | unary\n     unary : PLUS term\n              | MINUS term\n              | term\n     term : ID\n             | function_call_exp\n             | LPAREN expression RPAREN\n             | literal\n     literal : CHAR\n                | NUMBER_FLOAT\n                | NUMBER_INT\n                | STR\n                | TRUE\n                | FALSE\n     array : TYPE ID IS ARRAY LPAREN range RPAREN OF type\n     return : RETURN expression SEMICOLON\n    '
    
_lr_action_items = {'FUNCTION':([0,2,16,22,27,126,],[3,3,-5,-3,-4,-6,]),'PROCEDURE':([0,2,16,22,27,126,],[4,4,-5,-3,-4,-6,]),'$end':([1,2,5,16,22,27,126,],[0,-1,-2,-5,-3,-4,-6,]),'ID':([3,4,9,10,18,19,21,26,28,29,31,32,33,34,35,36,37,38,39,40,41,43,44,45,46,58,59,60,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,84,88,91,92,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,118,121,127,129,130,131,132,133,134,135,136,137,138,139,141,142,147,149,151,152,153,155,156,157,158,162,163,165,169,171,173,175,179,180,],[6,7,13,14,30,47,48,-14,14,30,-37,-30,-31,-32,-33,-34,-35,72,-43,-44,-45,72,30,85,72,93,-36,72,72,-52,-54,-56,72,-65,72,-68,-70,-73,-74,-75,72,-77,-78,-79,-80,-81,-82,-83,30,-13,13,72,30,72,72,72,-57,-58,-59,-60,-61,-62,72,72,-71,72,72,-72,72,72,-85,30,-50,-25,72,30,-51,-53,-55,-63,-64,-66,-67,-69,-27,-76,30,-24,-39,72,30,-26,-38,-46,30,30,30,30,30,-42,-47,-40,-41,-48,]),'LPAREN':([6,30,38,42,43,46,60,61,66,68,72,74,92,99,100,101,102,103,104,105,106,107,108,109,111,112,114,115,123,130,152,],[9,61,74,82,74,74,74,74,74,74,115,74,74,74,74,74,-57,-58,-59,-60,-61,-62,74,74,74,74,74,74,148,74,74,]),'IS':([7,8,23,48,51,52,53,54,55,90,],[10,11,-20,89,-15,-16,-17,-18,-19,-21,]),'BEGIN':([10,11,15,28,57,],[18,18,18,-8,-7,]),'TYPE':([10,28,],[21,21,]),'RPAREN':([12,61,63,64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,91,95,97,110,113,115,116,117,124,132,133,134,135,136,137,138,139,140,141,142,150,155,161,166,],[23,96,-52,-54,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,-23,128,-29,-71,-72,141,142,143,-22,-51,-53,-55,-63,-64,-66,-67,-69,155,-27,-76,-28,-26,168,-49,]),'COLON':([13,14,47,],[24,25,87,]),'COMMA':([14,47,63,64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,97,110,113,132,133,134,135,136,137,138,139,141,142,155,],[26,88,-52,-54,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,130,-71,-72,-51,-53,-55,-63,-64,-66,-67,-69,-27,-76,-26,]),'SEMICOLON':([17,20,50,51,52,53,54,55,56,63,64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,83,93,94,96,110,113,122,125,128,132,133,134,135,136,137,138,139,141,142,143,144,155,164,167,176,177,178,],[28,-12,91,-15,-16,-17,-18,-19,-10,-52,-54,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,118,126,127,129,-71,-72,-11,-9,149,-51,-53,-55,-63,-64,-66,-67,-69,-27,-76,156,157,-26,171,173,179,180,-84,]),'IF':([18,29,31,32,33,34,35,36,37,39,40,41,44,59,63,64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,84,98,110,113,118,121,127,129,131,132,133,134,135,136,137,138,139,141,142,147,149,151,153,154,155,156,157,158,162,163,165,169,170,171,173,175,179,180,],[38,38,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,38,-36,-52,-54,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,38,38,-71,-72,-85,38,-50,-25,38,-51,-53,-55,-63,-64,-66,-67,-69,-27,-76,38,-24,-39,38,164,-26,-38,-46,38,38,38,38,38,176,-42,-47,-40,-41,-48,]),'PUTS':([18,29,31,32,33,34,35,36,37,39,40,41,44,59,63,64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,84,98,110,113,118,121,127,129,131,132,133,134,135,136,137,138,139,141,142,147,149,151,153,155,156,157,158,162,163,165,169,171,173,175,179,180,],[42,42,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,42,-36,-52,-54,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,42,42,-71,-72,-85,42,-50,-25,42,-51,-53,-55,-63,-64,-66,-67,-69,-27,-76,42,-24,-39,42,-26,-38,-46,42,42,42,42,42,-42,-47,-40,-41,-48,]),'RETURN':([18,23,29,31,32,33,34,35,36,37,39,40,41,44,59,63,64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,84,98,110,113,118,121,127,129,131,132,133,134,135,136,137,138,139,141,142,147,149,151,153,155,156,157,158,162,163,165,169,171,173,175,179,180,],[43,49,43,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,43,-36,-52,-54,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,43,43,-71,-72,-85,43,-50,-25,43,-51,-53,-55,-63,-64,-66,-67,-69,-27,-76,43,-24,-39,43,-26,-38,-46,43,43,43,43,43,-42,-47,-40,-41,-48,]),'LOOP':([18,29,31,32,33,34,35,36,37,39,40,41,44,59,63,64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,84,86,98,110,113,118,119,121,127,129,131,132,133,134,135,136,137,138,139,141,142,145,147,149,151,153,155,156,157,158,160,162,163,165,166,169,171,172,173,175,179,180,],[44,44,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,44,-36,-52,-54,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,44,121,44,-71,-72,-85,144,44,-50,-25,44,-51,-53,-55,-63,-64,-66,-67,-69,-27,-76,158,44,-24,-39,44,-26,-38,-46,44,167,44,44,44,-49,44,-42,177,-47,-40,-41,-48,]),'FOR':([18,29,31,32,33,34,35,36,37,39,40,41,44,59,63,64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,84,98,110,113,118,121,127,129,131,132,133,134,135,136,137,138,139,141,142,147,149,151,153,155,156,157,158,162,163,165,169,171,173,175,179,180,],[45,45,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,45,-36,-52,-54,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,45,45,-71,-72,-85,45,-50,-25,45,-51,-53,-55,-63,-64,-66,-67,-69,-27,-76,45,-24,-39,45,-26,-38,-46,45,45,45,45,45,-42,-47,-40,-41,-48,]),'WHILE':([18,29,31,32,33,34,35,36,37,39,40,41,44,59,63,64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,84,98,110,113,118,121,127,129,131,132,133,134,135,136,137,138,139,141,142,147,149,151,153,155,156,157,158,162,163,165,169,171,173,175,179,180,],[46,46,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,46,-36,-52,-54,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,46,46,-71,-72,-85,46,-50,-25,46,-51,-53,-55,-63,-64,-66,-67,-69,-27,-76,46,-24,-39,46,-26,-38,-46,46,46,46,46,46,-42,-47,-40,-41,-48,]),'BOOLEAN':([24,25,49,87,174,],[51,51,51,51,51,]),'CHARACTER':([24,25,49,87,174,],[52,52,52,52,52,]),'FLOAT':([24,25,49,87,174,],[53,53,53,53,53,]),'INTEGER':([24,25,49,87,174,],[54,54,54,54,54,]),'STRING':([24,25,49,87,174,],[55,55,55,55,55,]),'END':([29,31,32,33,34,35,36,37,39,40,41,59,84,118,127,129,131,147,149,151,156,157,163,165,169,171,173,175,179,180,],[58,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,-36,119,-85,-50,-25,154,160,-24,-39,-38,-46,170,172,154,-42,-47,-40,-41,-48,]),'ASSIGN':([30,51,52,53,54,55,56,],[60,-15,-16,-17,-18,-19,92,]),'ELSIF':([31,32,33,34,35,36,37,39,40,41,59,118,127,129,131,149,151,156,157,169,171,173,175,179,180,],[-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,-36,-85,-50,-25,152,-24,-39,-38,-46,152,-42,-47,-40,-41,-48,]),'ELSE':([31,32,33,34,35,36,37,39,40,41,59,118,127,129,131,149,151,156,157,169,171,173,175,179,180,],[-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,-36,-85,-50,-25,153,-24,-39,-38,-46,153,-42,-47,-40,-41,-48,]),'PLUS':([38,43,46,60,61,65,67,69,70,71,72,73,74,75,76,77,78,79,80,81,94,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,130,134,135,136,137,138,139,141,142,152,155,],[66,66,66,66,66,108,-65,-68,-70,-73,-74,-75,66,-77,-78,-79,-80,-81,-82,-83,108,66,66,66,-57,-58,-59,-60,-61,-62,66,66,-71,66,66,-72,66,66,66,108,-63,-64,-66,-67,-69,-27,-76,66,-26,]),'MINUS':([38,43,46,60,61,65,67,69,70,71,72,73,74,75,76,77,78,79,80,81,94,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,130,134,135,136,137,138,139,141,142,152,155,],[68,68,68,68,68,109,-65,-68,-70,-73,-74,-75,68,-77,-78,-79,-80,-81,-82,-83,109,68,68,68,-57,-58,-59,-60,-61,-62,68,68,-71,68,68,-72,68,68,68,109,-63,-64,-66,-67,-69,-27,-76,68,-26,]),'CHAR':([38,43,46,60,61,66,68,74,92,99,100,101,102,103,104,105,106,107,108,109,111,112,114,115,130,152,],[76,76,76,76,76,76,76,76,76,76,76,76,-57,-58,-59,-60,-61,-62,76,76,76,76,76,76,76,76,]),'NUMBER_FLOAT':([38,43,46,60,61,66,68,74,92,99,100,101,102,103,104,105,106,107,108,109,111,112,114,115,130,152,],[77,77,77,77,77,77,77,77,77,77,77,77,-57,-58,-59,-60,-61,-62,77,77,77,77,77,77,77,77,]),'NUMBER_INT':([38,43,46,60,61,66,68,74,92,99,100,101,102,103,104,105,106,107,108,109,111,112,114,115,120,130,148,152,159,],[78,78,78,78,78,78,78,78,78,78,78,78,-57,-58,-59,-60,-61,-62,78,78,78,78,78,78,146,78,146,78,166,]),'STR':([38,43,46,60,61,66,68,74,82,92,99,100,101,102,103,104,105,106,107,108,109,111,112,114,115,130,152,],[79,79,79,79,79,79,79,79,117,79,79,79,79,-57,-58,-59,-60,-61,-62,79,79,79,79,79,79,79,79,]),'TRUE':([38,43,46,60,61,66,68,74,92,99,100,101,102,103,104,105,106,107,108,109,111,112,114,115,130,152,],[80,80,80,80,80,80,80,80,80,80,80,80,-57,-58,-59,-60,-61,-62,80,80,80,80,80,80,80,80,]),'FALSE':([38,43,46,60,61,66,68,74,92,99,100,101,102,103,104,105,106,107,108,109,111,112,114,115,130,152,],[81,81,81,81,81,81,81,81,81,81,81,81,-57,-58,-59,-60,-61,-62,81,81,81,81,81,81,81,81,]),'THEN':([62,63,64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,110,113,132,133,134,135,136,137,138,139,141,142,155,],[98,-52,-54,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,-71,-72,-51,-53,-55,-63,-64,-66,-67,-69,-27,-76,-26,]),'AND':([62,63,64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,83,86,97,110,113,116,132,133,134,135,136,137,138,139,141,142,155,162,],[99,-52,-54,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,99,99,99,-71,-72,99,-51,-53,-55,-63,-64,-66,-67,-69,-27,-76,-26,99,]),'OR':([63,64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,110,113,132,133,134,135,136,137,138,139,141,142,155,],[100,-54,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,-71,-72,100,-53,-55,-63,-64,-66,-67,-69,-27,-76,-26,]),'GREATERTHAN':([64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,110,113,133,134,135,136,137,138,139,141,142,155,],[102,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,-71,-72,102,-55,-63,-64,-66,-67,-69,-27,-76,-26,]),'GREATERTHANEQUAL':([64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,110,113,133,134,135,136,137,138,139,141,142,155,],[103,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,-71,-72,103,-55,-63,-64,-66,-67,-69,-27,-76,-26,]),'LESSTHAN':([64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,110,113,133,134,135,136,137,138,139,141,142,155,],[104,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,-71,-72,104,-55,-63,-64,-66,-67,-69,-27,-76,-26,]),'LESSTHANEQUAL':([64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,110,113,133,134,135,136,137,138,139,141,142,155,],[105,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,-71,-72,105,-55,-63,-64,-66,-67,-69,-27,-76,-26,]),'NOTEQUAL':([64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,110,113,133,134,135,136,137,138,139,141,142,155,],[106,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,-71,-72,106,-55,-63,-64,-66,-67,-69,-27,-76,-26,]),'EQUAL':([64,65,67,69,70,71,72,73,75,76,77,78,79,80,81,110,113,133,134,135,136,137,138,139,141,142,155,],[107,-56,-65,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,-71,-72,107,-55,-63,-64,-66,-67,-69,-27,-76,-26,]),'TIMES':([67,69,70,71,72,73,75,76,77,78,79,80,81,110,113,135,136,137,138,139,141,142,155,],[111,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,-71,-72,111,111,-66,-67,-69,-27,-76,-26,]),'DIVIDE':([67,69,70,71,72,73,75,76,77,78,79,80,81,110,113,135,136,137,138,139,141,142,155,],[112,-68,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,-71,-72,112,112,-66,-67,-69,-27,-76,-26,]),'POWER':([69,70,71,72,73,75,76,77,78,79,80,81,110,113,137,138,139,141,142,155,],[114,-70,-73,-74,-75,-77,-78,-79,-80,-81,-82,-83,-71,-72,114,114,-69,-27,-76,-26,]),'IN':([85,],[120,]),'ARRAY':([89,],[123,]),'DOTDOT':([146,],[159,]),'OF':([168,],[174,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,2,],[1,5,]),'subprogram':([0,2,],[2,2,]),'decl_param':([6,],[8,]),'param':([9,91,],[12,124,]),'decl':([10,28,],[15,57,]),'body':([10,11,15,],[16,22,27,]),'var':([10,28,],[17,17,]),'var_loop':([10,28,],[19,19,]),'array':([10,28,],[20,20,]),'cmd_loop':([18,44,98,121,153,158,162,],[29,84,131,147,163,165,169,]),'cmd':([18,29,44,84,98,121,131,147,153,158,162,163,165,169,],[31,59,31,59,31,31,59,59,31,31,31,59,59,59,]),'if_statement':([18,29,44,84,98,121,131,147,153,158,162,163,165,169,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'repeat_statement':([18,29,44,84,98,121,131,147,153,158,162,163,165,169,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'puts':([18,29,44,84,98,121,131,147,153,158,162,163,165,169,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'return':([18,29,44,84,98,121,131,147,153,158,162,163,165,169,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'assign':([18,29,44,84,98,121,131,147,153,158,162,163,165,169,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'function_call':([18,29,44,84,98,121,131,147,153,158,162,163,165,169,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'loop_statement':([18,29,44,84,98,121,131,147,153,158,162,163,165,169,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'for_statement':([18,29,44,84,98,121,131,147,153,158,162,163,165,169,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'while_statement':([18,29,44,84,98,121,131,147,153,158,162,163,165,169,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'type':([24,25,49,87,174,],[50,56,90,122,178,]),'expression':([38,43,46,61,74,115,130,152,],[62,83,86,97,116,97,97,162,]),'or_exp':([38,43,46,61,74,99,115,130,152,],[63,63,63,63,63,132,63,63,63,]),'comp_exp':([38,43,46,61,74,99,100,115,130,152,],[64,64,64,64,64,64,133,64,64,64,]),'op_arithmetic':([38,43,46,60,61,74,99,100,101,115,130,152,],[65,65,65,94,65,65,65,65,134,65,65,65,]),'factor':([38,43,46,60,61,74,99,100,101,108,109,115,130,152,],[67,67,67,67,67,67,67,67,67,135,136,67,67,67,]),'power':([38,43,46,60,61,74,99,100,101,108,109,111,112,115,130,152,],[69,69,69,69,69,69,69,69,69,69,69,137,138,69,69,69,]),'unary':([38,43,46,60,61,74,99,100,101,108,109,111,112,114,115,130,152,],[70,70,70,70,70,70,70,70,70,70,70,70,70,139,70,70,70,]),'term':([38,43,46,60,61,66,68,74,92,99,100,101,108,109,111,112,114,115,130,152,],[71,71,71,71,71,110,113,71,125,71,71,71,71,71,71,71,71,71,71,71,]),'function_call_exp':([38,43,46,60,61,66,68,74,92,99,100,101,108,109,111,112,114,115,130,152,],[73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'literal':([38,43,46,60,61,66,68,74,92,99,100,101,108,109,111,112,114,115,130,152,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'param_pass':([61,115,130,],[95,140,150,]),'comp_op':([64,133,],[101,101,]),'range':([120,148,],[145,161,]),'if_statement_loop':([131,169,],[151,175,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> subprogram','program',1,'p_program','parser.py',7),
  ('program -> subprogram program','program',2,'p_program','parser.py',8),
  ('subprogram -> FUNCTION ID decl_param IS body','subprogram',5,'p_subprogram','parser.py',16),
  ('subprogram -> PROCEDURE ID IS decl body','subprogram',5,'p_subprogram','parser.py',17),
  ('subprogram -> PROCEDURE ID IS body','subprogram',4,'p_subprogram','parser.py',18),
  ('body -> BEGIN cmd_loop END ID SEMICOLON','body',5,'p_body','parser.py',29),
  ('decl -> var SEMICOLON decl','decl',3,'p_decl','parser.py',34),
  ('decl -> var SEMICOLON','decl',2,'p_decl','parser.py',35),
  ('var -> ID COLON type ASSIGN term','var',5,'p_var','parser.py',43),
  ('var -> ID COLON type','var',3,'p_var','parser.py',44),
  ('var -> var_loop ID COLON type','var',4,'p_var','parser.py',45),
  ('var -> array','var',1,'p_var','parser.py',46),
  ('var_loop -> var_loop ID COMMA','var_loop',3,'p_var_loop','parser.py',58),
  ('var_loop -> ID COMMA','var_loop',2,'p_var_loop','parser.py',59),
  ('type -> BOOLEAN','type',1,'p_type','parser.py',67),
  ('type -> CHARACTER','type',1,'p_type','parser.py',68),
  ('type -> FLOAT','type',1,'p_type','parser.py',69),
  ('type -> INTEGER','type',1,'p_type','parser.py',70),
  ('type -> STRING','type',1,'p_type','parser.py',71),
  ('decl_param -> LPAREN param RPAREN','decl_param',3,'p_decl_param','parser.py',87),
  ('decl_param -> LPAREN param RPAREN RETURN type','decl_param',5,'p_decl_param','parser.py',88),
  ('param -> ID COLON type SEMICOLON param','param',5,'p_param','parser.py',96),
  ('param -> ID COLON type SEMICOLON','param',4,'p_param','parser.py',97),
  ('function_call -> ID LPAREN param_pass RPAREN SEMICOLON','function_call',5,'p_function_call','parser.py',105),
  ('function_call -> ID LPAREN RPAREN SEMICOLON','function_call',4,'p_function_call','parser.py',106),
  ('function_call_exp -> ID LPAREN param_pass RPAREN','function_call_exp',4,'p_function_call_exp','parser.py',115),
  ('function_call_exp -> ID LPAREN RPAREN','function_call_exp',3,'p_function_call_exp','parser.py',116),
  ('param_pass -> expression COMMA param_pass','param_pass',3,'p_param_pass','parser.py',124),
  ('param_pass -> expression','param_pass',1,'p_param_pass','parser.py',125),
  ('cmd -> if_statement','cmd',1,'p_cmd','parser.py',133),
  ('cmd -> repeat_statement','cmd',1,'p_cmd','parser.py',134),
  ('cmd -> puts','cmd',1,'p_cmd','parser.py',135),
  ('cmd -> return','cmd',1,'p_cmd','parser.py',136),
  ('cmd -> assign','cmd',1,'p_cmd','parser.py',137),
  ('cmd -> function_call','cmd',1,'p_cmd','parser.py',138),
  ('cmd_loop -> cmd_loop cmd','cmd_loop',2,'p_cmd_loop','parser.py',155),
  ('cmd_loop -> cmd','cmd_loop',1,'p_cmd_loop','parser.py',156),
  ('puts -> PUTS LPAREN STR RPAREN SEMICOLON','puts',5,'p_puts','parser.py',165),
  ('if_statement -> IF expression THEN cmd_loop if_statement_loop','if_statement',5,'p_if_statement','parser.py',170),
  ('if_statement_loop -> ELSIF expression cmd_loop if_statement_loop','if_statement_loop',4,'p_if_statement_loop','parser.py',175),
  ('if_statement_loop -> ELSE cmd_loop END IF SEMICOLON','if_statement_loop',5,'p_if_statement_loop','parser.py',176),
  ('if_statement_loop -> END IF SEMICOLON','if_statement_loop',3,'p_if_statement_loop','parser.py',177),
  ('repeat_statement -> loop_statement','repeat_statement',1,'p_repeat_statement','parser.py',188),
  ('repeat_statement -> for_statement','repeat_statement',1,'p_repeat_statement','parser.py',189),
  ('repeat_statement -> while_statement','repeat_statement',1,'p_repeat_statement','parser.py',190),
  ('loop_statement -> LOOP cmd_loop END LOOP SEMICOLON','loop_statement',5,'p_loop_statement','parser.py',200),
  ('while_statement -> WHILE expression LOOP cmd_loop END LOOP SEMICOLON','while_statement',7,'p_while_statement','parser.py',205),
  ('for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON','for_statement',9,'p_for_statement','parser.py',210),
  ('range -> NUMBER_INT DOTDOT NUMBER_INT','range',3,'p_range','parser.py',215),
  ('assign -> ID ASSIGN op_arithmetic SEMICOLON','assign',4,'p_assign','parser.py',220),
  ('expression -> expression AND or_exp','expression',3,'p_expression','parser.py',225),
  ('expression -> or_exp','expression',1,'p_expression','parser.py',226),
  ('or_exp -> or_exp OR comp_exp','or_exp',3,'p_or_exp','parser.py',234),
  ('or_exp -> comp_exp','or_exp',1,'p_or_exp','parser.py',235),
  ('comp_exp -> comp_exp comp_op op_arithmetic','comp_exp',3,'p_comp_exp','parser.py',243),
  ('comp_exp -> op_arithmetic','comp_exp',1,'p_comp_exp','parser.py',244),
  ('comp_op -> GREATERTHAN','comp_op',1,'p_comp_op','parser.py',252),
  ('comp_op -> GREATERTHANEQUAL','comp_op',1,'p_comp_op','parser.py',253),
  ('comp_op -> LESSTHAN','comp_op',1,'p_comp_op','parser.py',254),
  ('comp_op -> LESSTHANEQUAL','comp_op',1,'p_comp_op','parser.py',255),
  ('comp_op -> NOTEQUAL','comp_op',1,'p_comp_op','parser.py',256),
  ('comp_op -> EQUAL','comp_op',1,'p_comp_op','parser.py',257),
  ('op_arithmetic -> op_arithmetic PLUS factor','op_arithmetic',3,'p_op_arithmetic','parser.py',274),
  ('op_arithmetic -> op_arithmetic MINUS factor','op_arithmetic',3,'p_op_arithmetic','parser.py',275),
  ('op_arithmetic -> factor','op_arithmetic',1,'p_op_arithmetic','parser.py',276),
  ('factor -> factor TIMES power','factor',3,'p_factor','parser.py',286),
  ('factor -> factor DIVIDE power','factor',3,'p_factor','parser.py',287),
  ('factor -> power','factor',1,'p_factor','parser.py',288),
  ('power -> power POWER unary','power',3,'p_power','parser.py',299),
  ('power -> unary','power',1,'p_power','parser.py',300),
  ('unary -> PLUS term','unary',2,'p_unary','parser.py',308),
  ('unary -> MINUS term','unary',2,'p_unary','parser.py',309),
  ('unary -> term','unary',1,'p_unary','parser.py',310),
  ('term -> ID','term',1,'p_term','parser.py',321),
  ('term -> function_call_exp','term',1,'p_term','parser.py',322),
  ('term -> LPAREN expression RPAREN','term',3,'p_term','parser.py',323),
  ('term -> literal','term',1,'p_term','parser.py',324),
  ('literal -> CHAR','literal',1,'p_literal','parser.py',337),
  ('literal -> NUMBER_FLOAT','literal',1,'p_literal','parser.py',338),
  ('literal -> NUMBER_INT','literal',1,'p_literal','parser.py',339),
  ('literal -> STR','literal',1,'p_literal','parser.py',340),
  ('literal -> TRUE','literal',1,'p_literal','parser.py',341),
  ('literal -> FALSE','literal',1,'p_literal','parser.py',342),
  ('array -> TYPE ID IS ARRAY LPAREN range RPAREN OF type','array',9,'p_array','parser.py',359),
  ('return -> RETURN expression SEMICOLON','return',3,'p_return','parser.py',364),
]
