
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ARRAY ASSIGN BEGIN BOOLEAN CHAR COLON COMMA DIVIDE DOTDOT ELSE ELSIF END EQUAL FOR FUNCTION GREATERTHAN GREATERTHANEQUAL ID IF IN IS LESSTHAN LESSTHANEQUAL LOOP LPAREN MINUS NOTEQUAL NUMBER_EXPONENT NUMBER_FLOAT NUMBER_INT OF OR PLUS POWER PROCEDURE PUTS RETURN RPAREN SEMICOLON STRING THEN TIMES TYPE WHILEprogram : PROCEDURE ID IS decl body\n               | PROCEDURE ID IS body\n    subprogram : FUNCTION ID decl_param IS decl body\n                  | FUNCTION ID decl_param IS body\n     body : BEGIN cmd_loop END ID SEMICOLON\n     decl : var SEMICOLON decl\n             | var SEMICOLON\n\t\t     | subprogram decl\n             | subprogram\n     var : ID COMMA TYPE ASSIGN value\n\t\t\t| ID COLON TYPE\n\t\t\t| var_loop ID COLON TYPE\n\t\t\t| array\n     var_loop : var_loop ID COMMA\n               | ID COMMA\n     decl_param : LPAREN param RPAREN\n                  | LPAREN param RPAREN RETURN TYPE\n     param : ID COLON TYPE SEMICOLON param\n                | ID COLON TYPE SEMICOLON\n     function_call : ID LPAREN param_pass RPAREN SEMICOLON\n     function_call_exp : ID LPAREN param_pass RPAREN\n     param_pass : expression COMMA param_pass\n                   | expression\n     value : NUMBER_INT\n             | NUMBER_FLOAT\n             | NUMBER_EXPONENT\n             | BOOLEAN\n             | STRING\n             | CHAR\n     cmd : if_statement\n\t\t\t| repeat_statement\n\t\t\t| puts\n\t\t\t| return\n\t\t\t| assign\n\t\t\t| function_call\n    cmd_loop : cmd_loop cmd\n           | cmd\n     puts : PUTS LPAREN STRING RPAREN SEMICOLON\n     if_statement : IF expression THEN cmd_loop if_statement_loop\n     if_statement_loop : ELSIF expression cmd_loop if_statement_loop\n                          | ELSE expression cmd_loop END IF SEMICOLON\n                          | END IF SEMICOLON\n     repeat_statement : loop_statement\n                         | for_statement\n                         | while_statement\n     loop_statement : LOOP cmd_loop END LOOP\n     while_statement : WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON\n     for_statement : FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON\n     range : ID DOTDOT ID\n     assign : ID ASSIGN op_arithmetic SEMICOLON\n     expression : expression AND or_exp\n                   | or_exp\n     or_exp : or_exp OR comp_exp\n               | comp_exp\n     comp_exp : comp_exp comp_op op_arithmetic\n                 | op_arithmetic\n     comp_op : GREATERTHAN\n                | GREATERTHANEQUAL\n                | LESSTHAN\n                | LESSTHANEQUAL\n                | NOTEQUAL\n                | EQUAL\n     op_arithmetic : op_arithmetic PLUS factor\n                      | op_arithmetic MINUS factor\n                      | factor\n     factor : factor TIMES power\n               | factor DIVIDE power\n               | power\n     power : power POWER unary\n              | unary\n     unary : PLUS term\n              | MINUS term \n              | term \n     term : ID\n             | function_call_exp\n             | LPAREN expression RPAREN\n     array : TYPE ID IS ARRAY LPAREN range RPAREN OF TYPE SEMICOLON\n     return : RETURN expression SEMICOLON\n    '
    
_lr_action_items = {'PROCEDURE':([0,],[2,]),'$end':([1,7,17,112,],[0,-2,-1,-5,]),'ID':([2,4,9,10,11,12,14,15,18,20,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,44,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,63,68,70,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,96,98,102,112,113,115,116,117,118,119,120,121,122,123,124,126,128,131,132,134,137,139,140,141,143,144,145,146,147,149,152,153,156,160,161,162,163,168,171,174,176,],[3,5,5,21,38,39,40,-15,5,21,-37,-30,-31,-32,-33,-34,-35,58,-43,-44,-45,58,21,64,58,72,-36,58,58,-52,-54,-56,58,-65,58,-68,-70,-73,-74,-75,58,21,-14,104,21,58,58,58,-57,-58,-59,-60,-61,-62,58,58,-71,58,58,-72,58,58,-78,129,5,-5,-50,58,21,-51,-53,-55,-63,-64,-66,-67,-69,-76,-46,21,129,-4,-20,-39,58,58,-21,-38,155,21,21,-3,21,21,21,104,21,21,-42,-40,-47,-48,-41,]),'IS':([3,38,69,135,159,],[4,66,102,-16,-17,]),'BEGIN':([4,6,9,18,19,43,102,112,133,134,149,],[10,10,-9,-7,-8,-6,10,-5,10,-4,-3,]),'FUNCTION':([4,9,18,102,112,134,149,],[14,14,14,14,-5,-4,-3,]),'TYPE':([4,9,15,16,18,67,102,112,134,136,149,150,166,],[11,11,41,42,11,101,11,-5,-4,151,-3,159,172,]),'COMMA':([5,39,49,50,51,53,55,56,57,58,59,75,88,91,117,118,119,120,121,122,123,124,126,143,],[15,68,-52,-54,-56,-65,-68,-70,-73,-74,-75,115,-71,-72,-51,-53,-55,-63,-64,-66,-67,-69,-76,-21,]),'COLON':([5,39,104,],[16,67,136,]),'SEMICOLON':([8,13,42,49,50,51,53,55,56,57,58,59,62,72,73,88,91,101,105,106,107,108,109,110,111,114,117,118,119,120,121,122,123,124,126,127,143,151,154,165,170,172,173,175,],[18,-13,-11,-52,-54,-56,-65,-68,-70,-73,-74,-75,96,112,113,-71,-72,-12,-10,-24,-25,-26,-27,-28,-29,137,-51,-53,-55,-63,-64,-66,-67,-69,-76,144,-21,160,163,171,174,175,176,-77,]),'IF':([10,20,22,23,24,25,26,27,28,30,31,32,35,45,49,50,51,53,55,56,57,58,59,63,76,88,91,96,113,116,117,118,119,120,121,122,123,124,126,128,131,137,139,142,143,144,146,147,152,153,156,161,162,163,168,169,171,174,176,],[29,29,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,29,-36,-52,-54,-56,-65,-68,-70,-73,-74,-75,29,29,-71,-72,-78,-50,29,-51,-53,-55,-63,-64,-66,-67,-69,-76,-46,29,-20,-39,154,-21,-38,29,29,29,29,29,29,29,-42,-40,173,-47,-48,-41,]),'PUTS':([10,20,22,23,24,25,26,27,28,30,31,32,35,45,49,50,51,53,55,56,57,58,59,63,76,88,91,96,113,116,117,118,119,120,121,122,123,124,126,128,131,137,139,143,144,146,147,152,153,156,161,162,163,168,171,174,176,],[33,33,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,33,-36,-52,-54,-56,-65,-68,-70,-73,-74,-75,33,33,-71,-72,-78,-50,33,-51,-53,-55,-63,-64,-66,-67,-69,-76,-46,33,-20,-39,-21,-38,33,33,33,33,33,33,33,-42,-40,-47,-48,-41,]),'RETURN':([10,20,22,23,24,25,26,27,28,30,31,32,35,45,49,50,51,53,55,56,57,58,59,63,76,88,91,96,113,116,117,118,119,120,121,122,123,124,126,128,131,135,137,139,143,144,146,147,152,153,156,161,162,163,168,171,174,176,],[34,34,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,34,-36,-52,-54,-56,-65,-68,-70,-73,-74,-75,34,34,-71,-72,-78,-50,34,-51,-53,-55,-63,-64,-66,-67,-69,-76,-46,34,150,-20,-39,-21,-38,34,34,34,34,34,34,34,-42,-40,-47,-48,-41,]),'LOOP':([10,20,22,23,24,25,26,27,28,30,31,32,35,45,49,50,51,53,55,56,57,58,59,63,76,88,91,96,97,99,113,116,117,118,119,120,121,122,123,124,126,128,130,131,137,139,143,144,146,147,152,153,155,156,157,161,162,163,164,168,171,174,176,],[35,35,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,35,-36,-52,-54,-56,-65,-68,-70,-73,-74,-75,35,35,-71,-72,-78,128,131,-50,35,-51,-53,-55,-63,-64,-66,-67,-69,-76,-46,146,35,-20,-39,-21,-38,35,35,35,35,-49,35,165,35,35,-42,170,-40,-47,-48,-41,]),'FOR':([10,20,22,23,24,25,26,27,28,30,31,32,35,45,49,50,51,53,55,56,57,58,59,63,76,88,91,96,113,116,117,118,119,120,121,122,123,124,126,128,131,137,139,143,144,146,147,152,153,156,161,162,163,168,171,174,176,],[36,36,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,36,-36,-52,-54,-56,-65,-68,-70,-73,-74,-75,36,36,-71,-72,-78,-50,36,-51,-53,-55,-63,-64,-66,-67,-69,-76,-46,36,-20,-39,-21,-38,36,36,36,36,36,36,36,-42,-40,-47,-48,-41,]),'WHILE':([10,20,22,23,24,25,26,27,28,30,31,32,35,45,49,50,51,53,55,56,57,58,59,63,76,88,91,96,113,116,117,118,119,120,121,122,123,124,126,128,131,137,139,143,144,146,147,152,153,156,161,162,163,168,171,174,176,],[37,37,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,37,-36,-52,-54,-56,-65,-68,-70,-73,-74,-75,37,37,-71,-72,-78,-50,37,-51,-53,-55,-63,-64,-66,-67,-69,-76,-46,37,-20,-39,-21,-38,37,37,37,37,37,37,37,-42,-40,-47,-48,-41,]),'END':([20,22,23,24,25,26,27,28,30,31,32,45,63,96,113,116,128,137,139,144,147,156,161,162,163,168,171,174,176,],[44,-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,-36,97,-78,-50,142,-46,-20,-39,-38,157,164,142,169,-42,-40,-47,-48,-41,]),'ASSIGN':([21,41,],[46,71,]),'LPAREN':([21,29,33,34,37,40,46,47,52,54,58,60,77,78,79,80,81,82,83,84,85,86,87,89,90,92,93,100,115,140,141,],[47,60,61,60,60,70,60,60,60,60,93,60,60,60,60,-57,-58,-59,-60,-61,-62,60,60,60,60,60,60,132,60,60,60,]),'ELSIF':([22,23,24,25,26,27,28,30,31,32,45,96,113,116,128,137,139,144,161,163,168,171,174,176,],[-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,-36,-78,-50,140,-46,-20,-39,-38,140,-42,-40,-47,-48,-41,]),'ELSE':([22,23,24,25,26,27,28,30,31,32,45,96,113,116,128,137,139,144,161,163,168,171,174,176,],[-37,-30,-31,-32,-33,-34,-35,-43,-44,-45,-36,-78,-50,141,-46,-20,-39,-38,141,-42,-40,-47,-48,-41,]),'PLUS':([29,34,37,46,47,51,53,55,56,57,58,59,60,73,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,115,119,120,121,122,123,124,126,140,141,143,],[52,52,52,52,52,86,-65,-68,-70,-73,-74,-75,52,86,52,52,52,-57,-58,-59,-60,-61,-62,52,52,-71,52,52,-72,52,52,52,86,-63,-64,-66,-67,-69,-76,52,52,-21,]),'MINUS':([29,34,37,46,47,51,53,55,56,57,58,59,60,73,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,115,119,120,121,122,123,124,126,140,141,143,],[54,54,54,54,54,87,-65,-68,-70,-73,-74,-75,54,87,54,54,54,-57,-58,-59,-60,-61,-62,54,54,-71,54,54,-72,54,54,54,87,-63,-64,-66,-67,-69,-76,54,54,-21,]),'THEN':([48,49,50,51,53,55,56,57,58,59,88,91,117,118,119,120,121,122,123,124,126,143,],[76,-52,-54,-56,-65,-68,-70,-73,-74,-75,-71,-72,-51,-53,-55,-63,-64,-66,-67,-69,-76,-21,]),'AND':([48,49,50,51,53,55,56,57,58,59,62,65,75,88,91,94,117,118,119,120,121,122,123,124,126,143,152,153,],[77,-52,-54,-56,-65,-68,-70,-73,-74,-75,77,77,77,-71,-72,77,-51,-53,-55,-63,-64,-66,-67,-69,-76,-21,77,77,]),'NUMBER_INT':([49,50,51,53,55,56,57,58,59,65,71,88,91,117,118,119,120,121,122,123,124,126,143,],[-52,-54,-56,-65,-68,-70,-73,-74,-75,99,106,-71,-72,-51,-53,-55,-63,-64,-66,-67,-69,-76,-21,]),'RPAREN':([49,50,51,53,55,56,57,58,59,74,75,88,91,94,95,103,117,118,119,120,121,122,123,124,125,126,138,143,148,155,160,167,],[-52,-54,-56,-65,-68,-70,-73,-74,-75,114,-23,-71,-72,126,127,135,-51,-53,-55,-63,-64,-66,-67,-69,143,-76,-22,-21,158,-49,-19,-18,]),'OR':([49,50,51,53,55,56,57,58,59,88,91,117,118,119,120,121,122,123,124,126,143,],[78,-54,-56,-65,-68,-70,-73,-74,-75,-71,-72,78,-53,-55,-63,-64,-66,-67,-69,-76,-21,]),'GREATERTHAN':([50,51,53,55,56,57,58,59,88,91,118,119,120,121,122,123,124,126,143,],[80,-56,-65,-68,-70,-73,-74,-75,-71,-72,80,-55,-63,-64,-66,-67,-69,-76,-21,]),'GREATERTHANEQUAL':([50,51,53,55,56,57,58,59,88,91,118,119,120,121,122,123,124,126,143,],[81,-56,-65,-68,-70,-73,-74,-75,-71,-72,81,-55,-63,-64,-66,-67,-69,-76,-21,]),'LESSTHAN':([50,51,53,55,56,57,58,59,88,91,118,119,120,121,122,123,124,126,143,],[82,-56,-65,-68,-70,-73,-74,-75,-71,-72,82,-55,-63,-64,-66,-67,-69,-76,-21,]),'LESSTHANEQUAL':([50,51,53,55,56,57,58,59,88,91,118,119,120,121,122,123,124,126,143,],[83,-56,-65,-68,-70,-73,-74,-75,-71,-72,83,-55,-63,-64,-66,-67,-69,-76,-21,]),'NOTEQUAL':([50,51,53,55,56,57,58,59,88,91,118,119,120,121,122,123,124,126,143,],[84,-56,-65,-68,-70,-73,-74,-75,-71,-72,84,-55,-63,-64,-66,-67,-69,-76,-21,]),'EQUAL':([50,51,53,55,56,57,58,59,88,91,118,119,120,121,122,123,124,126,143,],[85,-56,-65,-68,-70,-73,-74,-75,-71,-72,85,-55,-63,-64,-66,-67,-69,-76,-21,]),'TIMES':([53,55,56,57,58,59,88,91,120,121,122,123,124,126,143,],[89,-68,-70,-73,-74,-75,-71,-72,89,89,-66,-67,-69,-76,-21,]),'DIVIDE':([53,55,56,57,58,59,88,91,120,121,122,123,124,126,143,],[90,-68,-70,-73,-74,-75,-71,-72,90,90,-66,-67,-69,-76,-21,]),'POWER':([55,56,57,58,59,88,91,122,123,124,126,143,],[92,-70,-73,-74,-75,-71,-72,92,92,-69,-76,-21,]),'STRING':([61,71,],[95,110,]),'IN':([64,],[98,]),'ARRAY':([66,],[100,]),'NUMBER_FLOAT':([71,],[107,]),'NUMBER_EXPONENT':([71,],[108,]),'BOOLEAN':([71,],[109,]),'CHAR':([71,],[111,]),'DOTDOT':([129,],[145,]),'OF':([158,],[166,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'decl':([4,9,18,102,],[6,19,43,133,]),'body':([4,6,102,133,],[7,17,134,149,]),'var':([4,9,18,102,],[8,8,8,8,]),'subprogram':([4,9,18,102,],[9,9,9,9,]),'var_loop':([4,9,18,102,],[12,12,12,12,]),'array':([4,9,18,102,],[13,13,13,13,]),'cmd_loop':([10,35,76,131,146,152,153,],[20,63,116,147,156,161,162,]),'cmd':([10,20,35,63,76,116,131,146,147,152,153,156,161,162,],[22,45,22,45,22,45,22,22,45,22,22,45,45,45,]),'if_statement':([10,20,35,63,76,116,131,146,147,152,153,156,161,162,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'repeat_statement':([10,20,35,63,76,116,131,146,147,152,153,156,161,162,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'puts':([10,20,35,63,76,116,131,146,147,152,153,156,161,162,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'return':([10,20,35,63,76,116,131,146,147,152,153,156,161,162,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'assign':([10,20,35,63,76,116,131,146,147,152,153,156,161,162,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'function_call':([10,20,35,63,76,116,131,146,147,152,153,156,161,162,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'loop_statement':([10,20,35,63,76,116,131,146,147,152,153,156,161,162,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'for_statement':([10,20,35,63,76,116,131,146,147,152,153,156,161,162,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'while_statement':([10,20,35,63,76,116,131,146,147,152,153,156,161,162,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'expression':([29,34,37,47,60,93,115,140,141,],[48,62,65,75,94,75,75,152,153,]),'or_exp':([29,34,37,47,60,77,93,115,140,141,],[49,49,49,49,49,117,49,49,49,49,]),'comp_exp':([29,34,37,47,60,77,78,93,115,140,141,],[50,50,50,50,50,50,118,50,50,50,50,]),'op_arithmetic':([29,34,37,46,47,60,77,78,79,93,115,140,141,],[51,51,51,73,51,51,51,51,119,51,51,51,51,]),'factor':([29,34,37,46,47,60,77,78,79,86,87,93,115,140,141,],[53,53,53,53,53,53,53,53,53,120,121,53,53,53,53,]),'power':([29,34,37,46,47,60,77,78,79,86,87,89,90,93,115,140,141,],[55,55,55,55,55,55,55,55,55,55,55,122,123,55,55,55,55,]),'unary':([29,34,37,46,47,60,77,78,79,86,87,89,90,92,93,115,140,141,],[56,56,56,56,56,56,56,56,56,56,56,56,56,124,56,56,56,56,]),'term':([29,34,37,46,47,52,54,60,77,78,79,86,87,89,90,92,93,115,140,141,],[57,57,57,57,57,88,91,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'function_call_exp':([29,34,37,46,47,52,54,60,77,78,79,86,87,89,90,92,93,115,140,141,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'decl_param':([40,],[69,]),'param_pass':([47,93,115,],[74,125,138,]),'comp_op':([50,118,],[79,79,]),'param':([70,160,],[103,167,]),'value':([71,],[105,]),'range':([98,132,],[130,148,]),'if_statement_loop':([116,161,],[139,168,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROCEDURE ID IS decl body','program',5,'p_program','parser.py',7),
  ('program -> PROCEDURE ID IS body','program',4,'p_program','parser.py',8),
  ('subprogram -> FUNCTION ID decl_param IS decl body','subprogram',6,'p_subprogram','parser.py',12),
  ('subprogram -> FUNCTION ID decl_param IS body','subprogram',5,'p_subprogram','parser.py',13),
  ('body -> BEGIN cmd_loop END ID SEMICOLON','body',5,'p_body','parser.py',17),
  ('decl -> var SEMICOLON decl','decl',3,'p_decl','parser.py',21),
  ('decl -> var SEMICOLON','decl',2,'p_decl','parser.py',22),
  ('decl -> subprogram decl','decl',2,'p_decl','parser.py',23),
  ('decl -> subprogram','decl',1,'p_decl','parser.py',24),
  ('var -> ID COMMA TYPE ASSIGN value','var',5,'p_var','parser.py',28),
  ('var -> ID COLON TYPE','var',3,'p_var','parser.py',29),
  ('var -> var_loop ID COLON TYPE','var',4,'p_var','parser.py',30),
  ('var -> array','var',1,'p_var','parser.py',31),
  ('var_loop -> var_loop ID COMMA','var_loop',3,'p_var_loop','parser.py',35),
  ('var_loop -> ID COMMA','var_loop',2,'p_var_loop','parser.py',36),
  ('decl_param -> LPAREN param RPAREN','decl_param',3,'p_decl_param','parser.py',40),
  ('decl_param -> LPAREN param RPAREN RETURN TYPE','decl_param',5,'p_decl_param','parser.py',41),
  ('param -> ID COLON TYPE SEMICOLON param','param',5,'p_param','parser.py',45),
  ('param -> ID COLON TYPE SEMICOLON','param',4,'p_param','parser.py',46),
  ('function_call -> ID LPAREN param_pass RPAREN SEMICOLON','function_call',5,'p_function_call','parser.py',50),
  ('function_call_exp -> ID LPAREN param_pass RPAREN','function_call_exp',4,'p_function_call_exp','parser.py',54),
  ('param_pass -> expression COMMA param_pass','param_pass',3,'p_param_pass','parser.py',58),
  ('param_pass -> expression','param_pass',1,'p_param_pass','parser.py',59),
  ('value -> NUMBER_INT','value',1,'p_value','parser.py',63),
  ('value -> NUMBER_FLOAT','value',1,'p_value','parser.py',64),
  ('value -> NUMBER_EXPONENT','value',1,'p_value','parser.py',65),
  ('value -> BOOLEAN','value',1,'p_value','parser.py',66),
  ('value -> STRING','value',1,'p_value','parser.py',67),
  ('value -> CHAR','value',1,'p_value','parser.py',68),
  ('cmd -> if_statement','cmd',1,'p_cmd','parser.py',72),
  ('cmd -> repeat_statement','cmd',1,'p_cmd','parser.py',73),
  ('cmd -> puts','cmd',1,'p_cmd','parser.py',74),
  ('cmd -> return','cmd',1,'p_cmd','parser.py',75),
  ('cmd -> assign','cmd',1,'p_cmd','parser.py',76),
  ('cmd -> function_call','cmd',1,'p_cmd','parser.py',77),
  ('cmd_loop -> cmd_loop cmd','cmd_loop',2,'p_cmd_loop','parser.py',81),
  ('cmd_loop -> cmd','cmd_loop',1,'p_cmd_loop','parser.py',82),
  ('puts -> PUTS LPAREN STRING RPAREN SEMICOLON','puts',5,'p_puts','parser.py',86),
  ('if_statement -> IF expression THEN cmd_loop if_statement_loop','if_statement',5,'p_if_statement','parser.py',90),
  ('if_statement_loop -> ELSIF expression cmd_loop if_statement_loop','if_statement_loop',4,'p_if_statement_loop','parser.py',94),
  ('if_statement_loop -> ELSE expression cmd_loop END IF SEMICOLON','if_statement_loop',6,'p_if_statement_loop','parser.py',95),
  ('if_statement_loop -> END IF SEMICOLON','if_statement_loop',3,'p_if_statement_loop','parser.py',96),
  ('repeat_statement -> loop_statement','repeat_statement',1,'p_repeat_statement','parser.py',100),
  ('repeat_statement -> for_statement','repeat_statement',1,'p_repeat_statement','parser.py',101),
  ('repeat_statement -> while_statement','repeat_statement',1,'p_repeat_statement','parser.py',102),
  ('loop_statement -> LOOP cmd_loop END LOOP','loop_statement',4,'p_loop_statement','parser.py',106),
  ('while_statement -> WHILE expression NUMBER_INT LOOP cmd_loop END LOOP SEMICOLON','while_statement',8,'p_while_statement','parser.py',110),
  ('for_statement -> FOR ID IN range LOOP cmd_loop END LOOP SEMICOLON','for_statement',9,'p_for_statement','parser.py',114),
  ('range -> ID DOTDOT ID','range',3,'p_range','parser.py',118),
  ('assign -> ID ASSIGN op_arithmetic SEMICOLON','assign',4,'p_assign','parser.py',122),
  ('expression -> expression AND or_exp','expression',3,'p_expression','parser.py',126),
  ('expression -> or_exp','expression',1,'p_expression','parser.py',127),
  ('or_exp -> or_exp OR comp_exp','or_exp',3,'p_or_exp','parser.py',131),
  ('or_exp -> comp_exp','or_exp',1,'p_or_exp','parser.py',132),
  ('comp_exp -> comp_exp comp_op op_arithmetic','comp_exp',3,'p_comp_exp','parser.py',136),
  ('comp_exp -> op_arithmetic','comp_exp',1,'p_comp_exp','parser.py',137),
  ('comp_op -> GREATERTHAN','comp_op',1,'p_comp_op','parser.py',141),
  ('comp_op -> GREATERTHANEQUAL','comp_op',1,'p_comp_op','parser.py',142),
  ('comp_op -> LESSTHAN','comp_op',1,'p_comp_op','parser.py',143),
  ('comp_op -> LESSTHANEQUAL','comp_op',1,'p_comp_op','parser.py',144),
  ('comp_op -> NOTEQUAL','comp_op',1,'p_comp_op','parser.py',145),
  ('comp_op -> EQUAL','comp_op',1,'p_comp_op','parser.py',146),
  ('op_arithmetic -> op_arithmetic PLUS factor','op_arithmetic',3,'p_op_arithmetic','parser.py',150),
  ('op_arithmetic -> op_arithmetic MINUS factor','op_arithmetic',3,'p_op_arithmetic','parser.py',151),
  ('op_arithmetic -> factor','op_arithmetic',1,'p_op_arithmetic','parser.py',152),
  ('factor -> factor TIMES power','factor',3,'p_factor','parser.py',156),
  ('factor -> factor DIVIDE power','factor',3,'p_factor','parser.py',157),
  ('factor -> power','factor',1,'p_factor','parser.py',158),
  ('power -> power POWER unary','power',3,'p_power','parser.py',162),
  ('power -> unary','power',1,'p_power','parser.py',163),
  ('unary -> PLUS term','unary',2,'p_unary','parser.py',167),
  ('unary -> MINUS term','unary',2,'p_unary','parser.py',168),
  ('unary -> term','unary',1,'p_unary','parser.py',169),
  ('term -> ID','term',1,'p_term','parser.py',173),
  ('term -> function_call_exp','term',1,'p_term','parser.py',174),
  ('term -> LPAREN expression RPAREN','term',3,'p_term','parser.py',175),
  ('array -> TYPE ID IS ARRAY LPAREN range RPAREN OF TYPE SEMICOLON','array',10,'p_array','parser.py',179),
  ('return -> RETURN expression SEMICOLON','return',3,'p_return','parser.py',183),
]
